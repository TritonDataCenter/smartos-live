{
  "name": "verror",
  "version": "1.6.0",
  "description": "richer JavaScript errors",
  "main": "./lib/verror.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/davepacheco/node-verror.git"
  },
  "dependencies": {
    "extsprintf": "1.2.0"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "scripts": {
    "test": "make test"
  },
  "license": "MIT",
  "readme": "# verror: richer JavaScript errors\n\nThis module provides two classes:\n\n* VError, for combining errors while preserving each one's error message, and\n* WError, for wrapping errors.\n\nBoth support printf-style error messages using\n[extsprintf](https://github.com/davepacheco/node-extsprintf).\n\n## printf-style Error constructor\n\nAt the most basic level, VError is just like JavaScript's Error class, but with\nprintf-style arguments:\n\n```javascript\nvar VError = require('verror');\n\nvar filename = '/etc/passwd';\nvar err = new VError('missing file: \"%s\"', filename);\nconsole.log(err.message);\n```\n\nThis prints:\n\n    missing file: \"/etc/passwd\"\n\n`err.stack` works the same as for built-in errors:\n\n```javascript\nconsole.log(err.stack);\n```\n\nThis prints:\n\n    missing file: \"/etc/passwd\"\n        at Object.<anonymous> (/Users/dap/node-verror/examples/varargs.js:4:11)\n        at Module._compile (module.js:449:26)\n        at Object.Module._extensions..js (module.js:467:10)\n        at Module.load (module.js:356:32)\n        at Function.Module._load (module.js:312:12)\n        at Module.runMain (module.js:492:10)\n        at process.startup.processNextTick.process._tickCallback (node.js:244:9)\n\n\n## Causes\n\nYou can also pass a `cause` argument, which is another Error.  For example:\n\n```javascript\nvar fs = require('fs');\nvar VError = require('verror');\n\nvar filename = '/nonexistent';\nfs.stat(filename, function (err1) {\n\tvar err2 = new VError(err1, 'stat \"%s\" failed', filename);\n\tconsole.error(err2.message);\n});\n```\n\nThis prints out:\n\n    stat \"/nonexistent\" failed: ENOENT, stat '/nonexistent'\n\nwhich resembles how Unix programs typically report errors:\n\n    $ sort /nonexistent\n    sort: open failed: /nonexistent: No such file or directory\n\nTo match the Unixy feel, just prepend the program's name to the VError's\n`message`.\n\nYou can also get the next-level Error using `err.cause()`:\n\n```javascript\nconsole.error(err2.cause().message);\n```\n\nprints:\n\n    ENOENT, stat '/nonexistent'\n\nOf course, you can nest these as many times as you want:\n\n```javascript\nvar VError = require('verror');\nvar err1 = new Error('No such file or directory');\nvar err2 = new VError(err1, 'failed to stat \"%s\"', '/junk');\nvar err3 = new VError(err2, 'request failed');\nconsole.error(err3.message);\n```\n\nThis prints:\n\n    request failed: failed to stat \"/junk\": No such file or directory\n\nThe idea is that each layer in the stack annotates the error with a description\nof what it was doing (with a printf-like format string) and the result is a\nmessage that explains what happened at every level.\n\n\n## WError: wrap layered errors\n\nSometimes you don't want an Error's \"message\" field to include the details of\nall of the low-level errors, but you still want to be able to get at them\nprogrammatically.  For example, in an HTTP server, you probably don't want to\nspew all of the low-level errors back to the client, but you do want to include\nthem in the audit log entry for the request.  In that case, you can use a\nWError, which is created exactly like VError (and also supports both\nprintf-style arguments and an optional cause), but the resulting \"message\" only\ncontains the top-level error.  It's also more verbose, including the class\nassociated with each error in the cause chain.  Using the same example above,\nbut replacing `err3`'s VError with WError, we get this output:\n\n    request failed\n\nThat's what we wanted -- just a high-level summary for the client.  But we can\nget the object's toString() for the full details:\n\n    WError: request failed; caused by WError: failed to stat \"/nonexistent\";\n    caused by Error: No such file or directory\n\n# Contributing\n\nContributions welcome.  Code should be \"make check\" clean.  To run \"make check\",\nyou'll need these tools:\n\n* https://github.com/davepacheco/jsstyle\n* https://github.com/davepacheco/javascriptlint\n\nIf you're changing something non-trivial or user-facing, you may want to submit\nan issue first.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/davepacheco/node-verror/issues"
  },
  "homepage": "https://github.com/davepacheco/node-verror",
  "_id": "verror@1.6.0",
  "dist": {
    "shasum": "e68155752889642d5f1541346b2ca7596cbbdc90"
  },
  "_from": "verror@1.6.0",
  "_resolved": "http://registry.npmjs.org/verror/-/verror-1.6.0.tgz"
}
