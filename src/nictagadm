#!/bin/bash
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright (c) 2015 Joyent, Inc. All rights reserved.
#

#
# Command-line tool for managing nic tags
#

PATH=/usr/bin:/usr/sbin
. /lib/sdc/config.sh

CMD=
CMD_LIST="add delete exists list update vms"
CONF=
CONF_FILES=
DELIM=":"
EXISTS_NAMES=
HAVE_USB=
LIST_LINE="%-14s %-18s %-14s %-16s\n"
LOCAL=
NORMALIZED_MAC=
NO_LIST_STUBS=
PARSABLE=
PROPS=
OVERLAY_RULES="/var/run/smartdc/networking/overlay_rules.json"
TAG_TYPE=
TMP_CONF="/tmp/.nic-tags"
VERBOSE=



# --- helpers



function fatal()
{
    echo "Error: $*" >&2
    exit 1
}

function warn()
{
    local msg="$*"
    [[ -n "$msg" ]] && echo "$msg" >&2
}


function verbose()
{
    [[ -n "${VERBOSE}" ]] && echo "+ $*" >&2
}


function usage()
{
    local msg me
    msg="$*"
    [[ -n "$msg" ]] && echo "$msg"
    me=$(basename $0)
cat - >&2 <<USAGE
Manage nic tags

Usage:
        $me [OPTIONS] <subcommand> <args...> ...

General Options:
        -v
            Verbose output

Subcommands:
        add             [-l] [-p prop=value,...] <name> [mac]
        delete          [-f] <name>
        exists          [-l] <name>
        list            [-l | -L] [-p] [-d delim]
        update          [-l] [-p prop=value,...] <name> [mac]
        vms             <name>
USAGE
    exit 2
}


# Clean up any temp files left around
function cleanup()
{
    local conf
    for conf in ${CONF_FILES}; do
        [[ -f ${conf}.$$ ]] && rm ${conf}.$$
    done
}


# Returns non-zero if the MAC is invalid
function valid_mac()
{
    echo "${1}" | grep "[a-fA-F0-9]\{1,2\}\:[a-fA-F0-9]\{1,2\}\:[a-fA-F0-9]\{1,2\}\:[a-fA-F0-9]\{1,2\}\:[a-fA-F0-9]\{1,2\}\:[a-fA-F0-9]\{1,2\}" >/dev/null 2>&1
}


# Returns zero for valid nic tag names, non-zero otherwise. Valid names:
# * Have the same valid characters as vnics and etherstubs
#   (alphanumeric plus _)
# * < 31 characters long, to allow for vnics to be brought up
#   named after those tags (eg: external0, external1, etc)
function valid_name()
{
    local res=$(echo $1 | tr -d '[a-zA-Z0-9_]')
    [[ -n $res ]] && return 1
    [[ $(echo ${1} | wc -c) -ge 31 ]] && return 1
    return 0
}

# Returns zero for a valid overlay rule name, non-zero otherwise. Valid names
# are slightly different. Specifically:
# * Have the same valid characters as vnics and etherstubs
#   (alphanumeric plus _)
# * Must end with a non-number, so they can be created as overlay devices with
#   <tag-name><overlay id>
# * Must be < 20 characters long, to allow for overlays to use a full 32-bit id
#   space
#
function valid_overlay_rule()
{
    local res=$(echo $1 | tr -d '[a-zA-Z0-9_]')
    [[ -n $res ]] && return 1
    res=$(echo $1 | sed 's/^.*[a-zA-Z_]$//')
    [[ -n $res ]] && return 1
    [[ $(echo ${1} | wc -c) -ge 20 ]] && return 1
    return 0
}


# Returns zero for valid etherstub names, non-zero otherwise. Valid names:
# * Consist only of alphanumeric characters plus _
# * <= 31 characters
# * Have a number at the end (in order to be a valid link name)
function valid_stub_name()
{
    local res=$(echo $1 | tr -d '[a-zA-Z0-9_]')
    [[ -n $res ]] && return 1

    echo "${1}" | grep '[0-9]$' > /dev/null 2>&1
    [[ $? != "0" ]] && return 1

    [[ $(echo ${1} | wc -c) -gt 31 ]] && return 1
    return 0
}

function valid_gen_name()
{
    local res=$(echo ${1} | sed -E 's/[a-zA-Z0-9_]+//')
    [[ -z "$res" ]]
}


# Returns non-zero if the MAC address does not belong to a physical nic on the
# system
function nic_exists()
{
    local macs mac
    macs=$(dladm show-phys -m -o address | grep -v ADDRESS)
    for mac in ${macs}; do
        normalize_mac ${mac}
        [[ ${NORMALIZED_MAC} == $1 ]] && return 0
    done

    return 1
}


# Returns non-zero if the aggregation does not exist in the config file
function aggr_exists()
{
    local conf_match
    conf_match=$(sdc_config_keys_contain "^${1}_aggr$")
    [[ "${conf_match}" == "true" ]] && return 0
    sdc_bootparams_keys | grep "^${1}_aggr" > /dev/null 2>&1
}


function get_link_names()
{
    local line fields
    for line in $(dladm show-phys -m -o address,link | \
        grep -v ADDRESS | awk '{ print $1, $2 }' | tr ' ' ','); do
        fields=(${line//,/ })
        normalize_mac ${fields[0]}
        [[ ${NORMALIZED_MAC} == $1 ]] && return 0
                eval "link_${NORMALIZED_MAC//:/_}=${fields[1]}"
    done
}


# helper to set global "normalized" to the expanded version of MAC ($1)
function normalize_mac()
{
    local mac=$1
    [[ -z "${mac}" ]] && fatal "unable to normalize empty mac!"

    NORMALIZED_MAC=`echo ${mac} | awk -F':' '{ print $1, $2, $3, $4, $5, $6 }' | { read o1 o2 o3 o4 o5 o6 junk
        printf "%02x:%02x:%02x:%02x:%02x:%02x" 0x${o1} 0x${o2} 0x${o3} 0x${o4} 0x${o5} 0x${o6}
    }`

    # ensure results are 'normal'
    echo "${NORMALIZED_MAC}" | grep "[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}\:[a-fA-F0-9]\{2\}" >/dev/null 2>&1
    [[ "$?" != "0" ]] && fatal "failed to normalize MAC '${mac}'"
}

#
# A valid MTU is a four digit number in the range of [1500, 9000]
#
function valid_mtu()
{
    local mtu=$1

    [[ $mtu =~ [1-9][0-9][0-9][0-9] ]] || fatal "invalid mtu: $mtu"
    [[ $mtu -lt 1500 || $mtu -gt 9000 ]] && fatal \
        "mtu must be between 1500-9000"
}


function find_config_paths()
{
    [[ -n ${CONF} ]] && return 0

    if boot_file_config_enabled; then
        CONF_FILES=${TMP_CONF}
        CONF=${TMP_CONF}
        verbose "Using config file (boot file config enabled): ${CONF_FILES}"
        return
    fi

    USB_CONFIG_COPY="$(svcprop -p 'joyentfs/usb_copy_path' \
        svc:/system/filesystem/smartdc:default)/config"
    USB_MNT="/mnt/$(svcprop -p 'joyentfs/usb_mountpoint' \
        svc:/system/filesystem/smartdc:default)"
    USB_CONFIG="${USB_MNT}/config"

    if [[ -f ${USB_CONFIG_COPY} ]]; then
        # SmartOS w/o SDC does not have /mnt/usbkey, so when smartos=true, we'll
        # not try to mount / umount a USB Key that won't exist. (OS-4357)
        if [[ -n $(/usr/bin/bootparams | /usr/bin/grep "^smartos=true" 2>/dev/null) ]]; then
            HAVE_USB=
            CONF_FILES="${USB_CONFIG_COPY}"
        else
            HAVE_USB=true
            CONF_FILES="${USB_CONFIG_COPY} ${USB_CONFIG}"
        fi
        CONF=${USB_CONFIG_COPY}
        verbose "Using config files: ${CONF_FILES}"
    elif [[ -f ${USB_CONFIG} ]]; then
        HAVE_USB=true
        CONF_FILES="${USB_CONFIG_COPY} ${USB_CONFIG}"
        CONF=${USB_CONFIG}
        verbose "Using config files: ${CONF_FILES}"
    else
        CONF_FILES=${TMP_CONF}
        CONF=${TMP_CONF}
        verbose "Using config file: ${CONF_FILES}"
    fi
}


function mount_usb()
{
    local key
    if [[ -z "${HAVE_USB}" ]]; then
        verbose "USB copy not present: not mounting USB key"
        return 0
    fi

    mount | grep "^${USB_MNT}" >/dev/null 2>&1
    if [[ $? == "0" ]]; then
        USB_ALREADY_MOUNTED=true
        verbose "USB key already mounted at: ${USB_MNT}"
        return 0
    fi

    USBKEYS=$(disklist -a)
    for key in ${USBKEYS}; do
        if [[ `fstyp /dev/dsk/${key}p0:1` == 'pcfs' ]]; then
            mount -F pcfs -o foldcase,noatime /dev/dsk/${key}p0:1 \
                ${USB_MNT};
            if [[ $? == "0" ]]; then
                if [[ ! -f ${USB_MNT}/.joyliveusb ]]; then
                    umount ${USB_MNT};
                else
                    break;
                fi
            fi
        fi
    done

    mount | grep "^${USB_MNT}" >/dev/null 2>&1
    if [[ $? == "0" ]]; then
        verbose "Could not mount ${USB_MNT}"
        return 0
    fi

    if [[ ! -f "${USB_CONFIG}" ]]; then
        verbose "${USB_CONFIG} does not exist"
        return 0
    fi
}


function umount_usb()
{
    if [[ -z "${HAVE_USB}" ]]; then
        verbose "USB copy not present: not unmounting USB key"
        return 0
    fi

    if [[ -n "${USB_ALREADY_MOUNTED}" ]]; then
        verbose "USB key mounted before script was run: not unmounting"
        return 0
    fi

    mount | grep "^${USB_MNT}" >/dev/null 2>&1
    if [[ $? == "0" ]]; then
        verbose "USB key no longer mounted: not unmounting"
        return 0
    fi

    umount ${USB_MNT}
}


# For nodes without /usbkey, initialize TMP_CONF with the nic and etherstub
# values from bootparams
function tag_conf_init()
{
    [[ -e ${TMP_CONF} ]] && return 0

    if boot_file_config_enabled; then
        verbose "Initializing TMP_CONF: ${TMP_CONF} (boot file config enabled)"
        if boot_file_config_valid 2>/dev/null; then
            boot_file_nic_tag_params > ${TMP_CONF}
            chmod 644 ${TMP_CONF}
        fi
    else
        verbose "Initializing TMP_CONF: ${TMP_CONF} (using bootparams)"
        bootparams | egrep '^.*_nic=|^etherstub=' > ${TMP_CONF}
        chmod 644 ${TMP_CONF}
    fi
}


# Check if a tag exists, and return 0 if it does.
#
# This is slightly more complicated for overlay rules. For overlay rules, the
# name of the rule itself is not a tag. Instead, a valid tag is one of which is
# formatted as 'rule/<number>'. As such, we check the tag type and if it matches
# an overlay_rule, we explicitly error. In addition, if it doesn't match and it
# has a '/' in it, then we see if it matches an overlay rule.
function tag_exists()
{
    local seen typ res tag num
    cmd_tag_list > /dev/null

    #
    # The '/' character is basically toxic to the shell when it comes to
    # variable names. So what we do is if this matches the overlay_rule pattern,
    # then we consider it. Otherwise, we next have to check if it's a valid to
    # make sure that none of the other shell meta-characters get in our way.
    # Isn't this fun? Sigh, shell...
    #
    res=$(echo ${1} | sed -E 's_[a-zA-Z_0-9]+/[0-9]+__')
    if [[ -z "${res}" ]]; then
        tag=${1%/*}
        num=${1#*/}
        typ=$(get_tag_type ${tag})
        [[ "${typ}" != "overlay_rule" ]] && return 1
        [[ "$num" -lt 0 || "$num" -gt 4294967294 ]] && return 1
        return 0
    fi

    ! valid_gen_name ${1} && return 1

    eval "seen=\${seen_${1}}"
    typ=$(get_tag_type ${1})
    [[ "${typ}" == "overlay_rule" ]] && return 1
    [[ -n "${seen}" ]] && return 0

    return 1
}


function tag_in_use()
{
    [[ $(cmd_tags_used_by ${1} | wc -l) -ne 0 ]]
}


# Moves any temp files over top of the original files they're
# meant to replace
function move_files()
{
    local conf
    for conf in ${CONF_FILES}; do
        [[ ! -f ${conf} ]] && continue
        [[ ! -f ${conf}.$$ ]] && continue

        mv ${conf}.$$ ${conf}
        [[ $? != 0 ]] && fatal "Error moving '${conf}.$$' to '${conf}"
    done
}


# Adds an etherstub config item to all conf files
function conf_add_etherstub()
{
    local conf stub_line
    verbose "Adding etherstub: $1"

    for conf in ${CONF_FILES}; do
        if [[ ! -f ${conf} ]]; then
            verbose "config file '$conf' does not exist: not adding etherstub"
            continue
        fi
        verbose "Adding etherstub '$1' to '$conf'"

        stub_line=$(grep '^etherstub=' ${conf} | tail -n 1)
        cat $conf | grep -v '^etherstub=' > ${conf}.$$

        # If the value of the etherstub line is empty, just replace the
        # whole line
        echo "${stub_line}" | grep '^etherstub=\s*$' > /dev/null 2>&1
        [[ $? == "0" ]] && stub_line=""

        if [[ -n ${stub_line} ]]; then
            echo "${stub_line},$1" >> ${conf}.$$
        else
            echo "etherstub=$1" >> ${conf}.$$
        fi
        [[ $? != 0 ]] && fatal "could not write to '${conf}.$$'"
    done

    move_files
}

# Adds a nic tag item to all conf files
function conf_add_tag()
{
    local conf
    for conf in ${CONF_FILES}; do
        if [[ ! -f ${conf} ]]; then
            verbose "File '${conf}' does not exist: not adding tag"
            continue
        fi
        verbose "Adding nic tag: $1=$2 to '$conf'"

        echo "${1}_nic=${2}" >> $conf
        [[ $? != 0 ]] && fatal "could not write to '$conf'"
        if [[ -n "${3}" ]]; then
            echo "${1}_mtu=${3}" >> $conf
            [[ $? != 0 ]] && fatal "could not write to '$conf'"
        fi
    done
}


# Updates a nic tag item in all conf files
function conf_update_field()
{
    local name key value

    name="$1"
    key="$2"
    value="$3"
    for conf in ${CONF_FILES}; do
        if [[ ! -f ${conf} ]]; then
            verbose "File '${conf}' does not exist: not updating tag"
            continue
        fi
        verbose "Updating nic tag: ${name}_${key}=$value in '$conf'"

        cat $conf | grep -v "^${name}_${key}=" > ${conf}.$$
        echo "${name}_${key}=${value}" >> ${conf}.$$
        [[ $? != 0 ]] && fatal "could not write to '$conf'"
    done
}

# Commit a series of updates now that they're all done
function conf_update_commit()
{
    move_files
}


# Deletes a nic tag line from all conf files
function conf_delete_tag()
{
    local conf

    for conf in ${CONF_FILES}; do
        if [[ ! -f ${conf} ]]; then
            verbose "File '${conf}' does not exist: not deleting tag"
            continue
        fi
        verbose "Deleting nic tag '$1' from '$conf'"

        cat $conf | grep -v "^${1}_nic=" | grep -v "^${1}_mtu=" > ${conf}.$$
        [[ $? != 0 ]] && fatal "could not write to '$conf'"
    done

    move_files
}


# Deletes an etherstub from all conf files
function conf_delete_etherstub()
{
    local conf stub_line
    for conf in ${CONF_FILES}; do
        if [[ ! -f ${conf} ]]; then
            verbose "File '${conf}' does not exist: not deleting etherstub"
            continue
        fi
        verbose "Deleting etherstub '$1' from '$conf'"

        stub_line=$(grep '^etherstub=' ${conf} | tail -n 1)
        cat $conf | grep -v '^etherstub=' > ${conf}.$$

        # If there are no more etherstubs left in the line, just omit it
        # from the file
        echo "${stub_line}" | grep '^etherstub=\s*$' > /dev/null 2>&1
        [[ $? == "0" ]] && stub_line=""

        if [[ -n ${stub_line} ]]; then
            echo "${stub_line}" | sed -e s/${1},*// | \
                sed -e s/,$// >> ${conf}.$$
        fi
    done

    move_files
}


# prints one tag / mac / link line, optionally formatted to be parseable
function print_line()
{
    local tag mac link seen
    tag=$1
    mac=$2
    link=$3
    ntype=$(get_tag_type ${1} | tr '_' ' ')

    eval "seen=\${seen_${1}}"
    # Try to see if we have a link name from get_link_names():
    [[ -z ${link} ]] && eval "link=\${link_${mac//:/_}}"
    [[ -z ${link} ]] && link="-"

    # Don't print out duplicates
    if [[ -z "${seen}" ]]; then
        eval "seen_${tag}=true"

        if [[ -n "${PARSABLE}" ]]; then
            [[ "${DELIM}" == ":" ]] && mac=${mac//:/\\:}
            echo "${tag}${DELIM}${mac}${DELIM}${link}${DELIM}${ntype}"
        else
            printf "${LIST_LINE}" ${tag} ${mac} ${link} "${ntype}"
        fi
    fi
}


# Sets a variable indicating the tag's type. Must be run before print_line()
# for that stub, since it uses the seen_ variable to filter out duplicates
function set_tag_type()
{
    local seen_stub
    eval "seen_stub=\${seen_${1}}"
    if [[ -z "${seen_stub}" ]]; then
        eval "type_${1}=${2}"
    fi
}


function get_tag_type()
{
    local get_type
    eval "get_type=\${type_${1}}"
    [[ -z "${get_type}" ]] && get_type="-"
    echo ${get_type}
}

function parse_props()
{
    local props ofs key value f
    props="$1"
    ofs=$IFS

    IFS=","
    for f in $props; do
        key=$(echo $f | nawk -F\= '{ print $1 }')
        value=$(echo $f | nawk -F\= '{ print $2 }')
        [[ -z "$key" ]] && fatal "invalid property $1"
        [[ -z "$value" ]] && fatal "invalid property $1"
        PROPS[$key]=$value
    done
    IFS=$ofs
}

# --- commands



function cmd_tag_exists()
{
    local arg es
    if [[ $# -eq 0 ]]; then
        fatal "tag_exists: no tag specified"
    fi

    es=0
    for arg in "$@"; do
        tag_exists $arg
        if [[ $? -ne 0 ]]; then
            if [[ -z "$EXISTS_NAMES" ]]; then
                 warn "invalid tag: $arg"
            else
                 warn "$arg"
            fi
            es=1
        fi
    done

    return $es
}


function cmd_tag_list()
{
    local line fields tag val key stub_line
    local rules rl

    [[ -z ${PARSABLE} ]] && printf "${LIST_LINE}" \
        "NAME" "MACADDRESS" "LINK" "TYPE"
    get_link_names

    if [[ -z ${LOCAL} ]]; then
        # go through lines in reverse order, since later lines will take
        # precedence when evaluated with bash
        for line in $(cat ${CONF} | grep "^.*_nic=" | grep -v "^[ 	]*#" \
            | tail -r); do
            fields=(${line//=/ })
            tag=${fields[0]/_nic/}
            val=${fields[1]}

            if valid_stub_name ${val}; then
                set_tag_type ${tag} "aggr"
                print_line ${tag} "-" ${val}
            else
                set_tag_type ${tag} "normal"
                normalize_mac ${val}
                print_line ${tag} ${NORMALIZED_MAC}
            fi
        done
    fi

    #
    # Go through and print overlay device rules
    #
    if [[ -z "${LOCAL}" ]]; then
        rules=$(json -ka -f ${OVERLAY_RULES} 2>/dev/null)
        if [[ $? -eq 0 ]]; then
            for rl in ${rules}; do
                ! valid_overlay_rule ${rl} && continue
                set_tag_type ${rl} "overlay_rule"
                print_line ${rl} "-" "-"
            done
        fi
    fi

    [[ -n "${NO_LIST_STUBS}" ]] && return 0

    for key in $(dladm show-etherstub -p); do
        eval "etherstub_up_${key}=true"
        set_tag_type ${key} "etherstub"
        print_line ${key} "-"
    done

    # Catch tags that are in the config etherstub list but are not up
    stub_line=$(grep '^etherstub=' ${CONF} | tail -n 1)
    echo "${stub_line}" | grep '^etherstub=\s*$' > /dev/null 2>&1
    [[ $? == "0" ]] && stub_line=""

    if [[ -n ${stub_line} ]]; then
        fields=(${stub_line//=/ })
        for key in ${fields[1]/,/ }; do
            set_tag_type ${key} "etherstub"
            print_line ${key} "-"
        done
    fi
}


function cmd_tag_add()
{
    local name mac mtu

    name=$1
    [[ -z "$name" ]] && usage

    [[ -n "$2" && -n "${PROPS['mac']}" ]] && fatal "mac address specified twice"
    [[ -n "$2" ]] && mac=$2
    [[ -n "${PROPS['mac']}" ]] && mac=${PROPS['mac']}

    [[ -z "$mac" && -z "$LOCAL" ]] && fatal \
        "create non-local tag, but no mac address specified"

    [[ -n "$mac" && -n "$LOCAL" ]] && fatal \
        "create local tag, but mac address specified"

    mtu=${PROPS['mtu']}
    [[ -n $mtu && -n "$LOCAL" ]] && fatal "Cannot specify MTU for local nic tag"
    [[ -n "$mtu" ]] && valid_mtu $mtu

    tag_exists $name && fatal "nic tag '$name' already exists"

    #
    # When creating a network tag over an aggregation, we use the 'MAC'
    # field to optionally be the name of an aggregation.
    #
    if [[ -n "$mac" ]]; then
        if valid_stub_name "$mac"; then
            aggr_exists $mac || fatal "aggregation '$mac' does not exist"
        else
            valid_mac $mac || fatal "MAC address '$mac' is invalid"
            normalize_mac $mac
            nic_exists $NORMALIZED_MAC || \
                fatal "No physical nic found with MAC address '$mac'"
            mac=$NORMALIZED_MAC
        fi

        valid_name $name || "nic tag name is invalid"
    else
        valid_stub_name $name || fatal "nic tag name is invalid"
    fi


    verbose "adding nic tag: name='$name', mac='$mac', local='$LOCAL'"
    [[ -n "$mtu" ]] && verbose "adding mtu for tag: name='$name', mtu='$mtu'"

    mount_usb
    if [[ -n $LOCAL ]]; then
        conf_add_etherstub $name
        dladm create-etherstub -t $name
        [[ $? != 0 ]] && fatal "Could not create etherstub '$name'"
    else
        conf_add_tag $name $mac $mtu
    fi

    sysinfo -u
    umount_usb

    [[ -n "$mtu" ]] && warn "MTU changes will not take effect until next reboot"
    return 0
}


function cmd_tag_update()
{
    local name mac mtu

    name="$1"
    [[ -z "$name" ]] && usage
    [[ -n "$LOCAL" ]] && fatal "cannot update a local tag"

    #
    # We require either the presence of the MTU or mac address, though
    # both are also fine.
    #
    [[ -n "$2" && -n "${PROPS['mac']}" ]] && fatal "mac address specified twice"
    [[ -n "$2" ]] && mac=$2
    [[ -n "${PROPS['mac']}" ]] && mac=${PROPS['mac']}

    mtu=${PROPS['mtu']}
    [[ -n "$mtu" ]] && valid_mtu $mtu

    [[ -z "$mac" && -z "$mtu" ]] && fatal "nothing to update"

    tag_exists $name || fatal "nic tag '$name' does not exist"

    #
    # Recall that the 'mac' of an aggregation is its name.
    #
    if [[ -n "$mac" ]]; then
        if valid_stub_name "$mac"; then
            aggr_exists $mac || fatal "aggregation '$mac' does not exist"
        else
            valid_mac $mac || fatal "MAC address '$mac' is invalid"
            normalize_mac $mac
            nic_exists ${NORMALIZED_MAC} || fatal \
                "No physical nic found with MAC address '$mac'"
            mac=${NORMALIZED_MAC}
        fi
    fi

    [[ -n "$mac" ]] && verbose \
        "updating nic tag MAC: name='$name', mac='$mac'"
    [[ -n "$mtu" ]] && verbose \
        "updating nic tag MTU: name='$name', mtu='$mtu'"

    mount_usb
    [[ -n "$mac" ]] && conf_update_field $1 "nic" ${mac}
    [[ -n "$mtu" ]] && conf_update_field $1 "mtu" ${mtu}
    conf_update_commit

    sysinfo -u
    umount_usb

    [[ -n "$mtu" ]] && warn "MTU changes will not take effect until next reboot"
    return 0
}


function cmd_tag_delete()
{
    local tag_type etherstub_up
    [[ -z "$1" ]] && usage
    [[ -n "$LOCAL" ]] && usage

    tag_exists $1 "true" || fatal "nic tag '$1' does not exist"
    [[ -z "$FORCE" ]] && tag_in_use $1 && fatal "nic tag '$1' is in use"
    verbose "deleting nic tag: $1"

    mount_usb

    tag_type=$(get_tag_type ${1})
    if [[ ${tag_type} == "etherstub" ]]; then
        conf_delete_etherstub $1
    else
        conf_delete_tag $1
    fi

    eval "etherstub_up=\${etherstub_up_${1}}"
    if [[ -n "${etherstub_up}" ]]; then
        verbose "bringing down etherstub: $1"
        dladm delete-etherstub $1
        [[ $? != "0" ]] && fatal "could not remove etherstub '$1'"
    fi

    sysinfo -u
    umount_usb
}


function cmd_tags_used_by()
{
    [[ -z "$1" ]] && usage
    vmadm list -p -o uuid nics.*.nic_tag=${1}
}



# --- main



[[ $(zonename) != "global" ]] && \
    fatal "This program can only be run in the global zone."
[[ ${EUID} != 0 ]] && \
    fatal "This program can only be run as root."

# -v goes before the command
while getopts vh? opt; do
    case $opt in
    v)
        VERBOSE="true"
        ;;
    esac
done
shift $(($OPTIND - 1))
OPTIND=1

# Wait until after the VERBOSE has been set:
load_sdc_config
find_config_paths
trap cleanup EXIT

# If we have no /usbkey, ensure that the tags conf file is initialized
[[ -z ${HAVE_USB} && ! -f ${USB_CONFIG_COPY} ]] && tag_conf_init

for c in $CMD_LIST; do
    if [[ "$1" -eq $c ]]; then
        CMD=$1
        shift
        break
    fi
done

[[ -z "$CMD" ]] && usage

declare -A PROPS

OPTIND=1
case "$CMD" in
    "add" | "update")
        while getopts "lp:" c $@; do
            case $c in
            l)
                LOCAL="true"
                ;;
            p)
                parse_props $OPTARG
                ;;
            :)
                usage "missing required argument -- $OPTARG"
                ;;
            *)
                usage "invalid option: $OPTARG"
                ;;
            esac
        done
        ;;
    delete)
        while getopts "f" c $@; do
            case $c in
            f)
                FORCE="true"
                ;;
            :)
                usage "missing required argument -- $OPTARG"
                ;;
            *)
                usage "invalid option: $OPTARG"
                ;;
            esac
        done
        ;;
    list)
        while getopts "lLpd:" c $@; do
            case $c in
            d)
                DELIM=${OPTARG}
                delim_flag=true
                ;;
            l)
                LOCAL="true"
                ;;
            L)
                NO_LIST_STUBS="true"
                ;;
            p)
                PARSABLE="true"
                ;;
            :)
                usage "missing required argument -- $OPTARG"
                ;;
            *)
                usage "invalid option: $OPTARG"
                ;;
            esac
        done
        ;;
    exists)
        while getopts "l" c $@; do
            case $c in
            l)
                EXISTS_NAMES="true"
                ;;
            :)
                usage "missing required argument -- $OPTARG"
                ;;
            *)
                usage "invalid option: $OPTARG"
                ;;
            esac
        done
        ;;
esac

shift $(($OPTIND - 1))

[[ -n $LOCAL ]] && [[ -n $NO_LIST_STUBS ]] && \
    fatal "Cannot specify both local and non-local options"

[[ -n "${delim_flag}" ]] && [[ -z $PARSABLE ]] && \
    fatal "Delimiter option requires parsable option to be set"

case ${CMD} in
    add) cmd_tag_add "$1" "$2";;
    delete) cmd_tag_delete "$1";;
    exists) cmd_tag_exists $@;;
    list) cmd_tag_list ;;
    update) cmd_tag_update "$1" "$2";;
    vms) cmd_tags_used_by "$1";;
    *) fatal "unknown command ${CMD}";;
esac
