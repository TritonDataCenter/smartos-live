#!/bin/bash

# All tests must pass!
set -o errexit

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [[ ! -f "/lib/sdc/.sdc-test-no-production-data" ]]; then
    cat <<EOF
To run this test you must create the file:

    /lib/sdc/.sdc-test-no-production-data

after ensuring you have no production data on this machine.
EOF
    exit 2
fi

start_time=$(date +%s)

if [[ $(uname -s) != 'SunOS' ]]; then
    echo "FATAL: this can only run on SmartOS"
    exit 1
fi

if [[ $(zonename) != 'global' ]]; then
    echo "FATAL: this can only run in the GZ"
    exit 1
fi

if [[ $(id -u) != 0 ]]; then
    echo "FATAL: this can only run as root"
    exit 1
fi

if [[ -z "$1" ]]; then
    echo "FATAL: no test file specified"
    exit 1
fi

# Before starting tests, ensure we have the source(s) we want for test VM images

have_sources="imgadm sources | sort"
want_source="grep IMAGES_SOURCE ${ROOT}/common/vmtest.js | cut -d\' -f2"

for src in $(comm -1 -3 <(eval ${have_sources}) <(eval ${want_source})); do
    imgadm sources -a "${src}"
done

# Ensure images used by tests are installed

installed_images='imgadm list -H -o uuid | sort'
want_images="cat ${ROOT}/common/vmtest.js | grep exports\.CURRENT_.*_UUID | cut -d \"'\" -f2 | sort"

for img in $(comm -1 -3 <(eval ${installed_images}) <(eval ${want_images})); do
    imgadm import "${img}"
done

# Ensure nic tags needed by tests exist

for tag in admin external; do
    if ! /usr/bin/nictagadm exists ${tag} >/dev/null 2>&1; then
        echo "Missing NIC tag: ${tag}, please add w/ nictagadm and try again" >&2
        exit 2
    fi
done

set +o errexit
set -o pipefail
/usr/node/bin/node --abort_on_uncaught_exception \
    /usr/vm/node_modules/nodeunit/bin/nodeunit \
    --reporter tap $1 | tee -a /tmp/test.output.$$
TEST_EXIT_CODE=$?
set +o pipefail
set -o errexit

end_time=$(date +%s)
elapsed=$((${end_time} - ${start_time}))

tests=$(grep "^# tests [0-9]" /tmp/test.output.$$ | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
passed=$(grep "^# pass  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)
skipped=$(grep "^# skip  [0-9]" /tmp/test.output.$$ | tr -s ' ' | cut -d ' ' -f3 | xargs | tr ' ' '+' | bc)

[[ -z ${tests} ]] && tests=0
[[ -z ${passed} ]] && passed=0
[[ -z ${skipped} ]] && skipped=0

fail=$((${tests} - ${passed} - ${skipped}))

if [[ ${TEST_EXIT_CODE} != 0 ]]; then
    fail=$((${fail} + 1))
    tests="?"
fi

if [[ -t 0 ]]; then
    # We're on a terminal so output the summary
    echo "#"
    echo "# $1 TEST COMPLETE IN ${elapsed} SECONDS, SUMMARY:"
    echo "#"
    if [[ ${tests} != "?" ]]; then
        echo -e "# \033[32mPASS: ${passed} / ${tests}\033[39m"
    fi
    if [[ ${skipped} -gt 0 ]]; then
        echo -e "# \033[31mSKIP: ${skipped} / ${tests}\033[39m"
    fi
    if [[ ${fail} -gt 0 ]]; then
        echo -e "# \033[31mFAIL: ${fail} / ${tests}\033[39m"
    fi
    echo "#"
fi

if [[ ${fail} -gt 0 ]]; then
    exit 1
fi

exit 0
