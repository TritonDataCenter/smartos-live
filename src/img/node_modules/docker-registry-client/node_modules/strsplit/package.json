{
  "name": "strsplit",
  "version": "1.0.0",
  "description": "split a string by a regular expression",
  "main": "lib/strsplit.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/davepacheco/node-strsplit"
  },
  "keywords": [
    "string",
    "split"
  ],
  "author": {
    "name": "Dave Pacheco",
    "email": "dap@joyent.com"
  },
  "license": "MIT",
  "scripts": {
    "test": "make test"
  },
  "readme": "# node-strsplit: split a string by a regular expression\n\n## strsplit(str, [pattern[, limit]])\n\nSplits a string `str` into fields using `pattern` as the separator, which may be\neither a string or a regular expression.  If `pattern` is not specified, then\nthe regular expression `\\s+` is used to split on whitespace.\n\nIf `limit` is a positive number, the pattern will be applied at most `limit - 1`\ntimes and the returned array will have at most `limit` elements.  The last\nelement will contain all of `str` beyond the last separator.  (This is unlike\nthe JavaScript standard String.split method, which also provides a `limit`\nargument to control the number of returned fields.  String.split always applies\nthe pattern as many times as possible, and only returns the first `limit`\nfields, so the rest of the input is lost.  See Notes below for details.)\n\nIf `limit` is unspecified, negative, or zero, then there is no limit on the\nnumber of matches or returned fields.  Additionally, if `limit` is zero,\ntrailing empty fields are discarded.\n\nIt's often desirable to skip leading empty fields as well, as awk(1) and bash(1)\ndo in processing fields.  To do this, use String.trim before calling strsplit.\n\n\n## Examples\n\nSplit a colon-separated list (e.g., a line from /etc/passwd):\n\n    > strsplit('nobody:*:-2:-2:Nobody User:/var/empty:/usr/bin/false', ':');\n    [ 'nobody', '*', '-2', '-2', 'Nobody User', '/var/empty', '/usr/bin/false' ]\n\nSplit a whitespace-separated list (e.g., output from \"ps\"):\n\n    > strsplit('86008 ttys000    0:00.05 -bash', /\\s+/);\n    [ '86008', 'ttys000', '0:00.05', '-bash' ]\n\nSimilarly, split a line into words:\n\n    > strsplit('How about a game of chess?', /\\s+/)\n    [ 'How', 'about', 'a', 'game', 'of', 'chess?' ]\n\nSome tabular data formats allow the last field to contain the delimeter.  The\nreader is expected to know how many fields there are to avoid getting confused.\nThe number of fields can be specified with the `limit` argument:\n\n    > /* 4 Fields: Games, Wins, Losses, Team Name */\n    > strsplit('101 55 46 San Francisco Giants', ' ', 4);\n    [ '101', '55', '46', 'San Francisco Giants' ]\n\nSee [node-tab](https://github.com/davepacheco/node-tab) for a higher-level\ninterface to read and write tabular data.\n\n\n## Notes\n\nAs described above, `strsplit` is similar to `String.split`, but limits the\nnumber of times the pattern is matched rather than simply the number of matched\nfields returned.  If you actually want only the first N matches, then specify no\nlimit and call `slice` on the result (or just use String.split).  If `limit` is\nnegative or unspecified, the behavior is exactly identical to\n`str.split(pattern)`.\n\nBy comparison, here's String.split:\n\n    > 'alpha bravo charlie delta'.split(' ', 3)\n    [ 'alpha', 'bravo', 'charlie' ]\n\nand here's strsplit:\n\n    > strsplit('alpha bravo charlie delta', ' ', 3)\n    [ 'alpha', 'bravo', 'charlie delta' ]\n\nThis is the behavior implemented by `split` in Perl, Java, and Python.\n\n## Background: survey of \"split\" in Java, Perl, and Python\n\nThe tests directory contains test cases and test programs in Java, Perl, and\nPython for figuring out what these language's string split function does.\nSpecifically, this is:\n\n* Java: String.split.\n* Perl: split.\n* Python: re.split.  While the \"split\" method on strings may be more common, it\n  does not handle regular expressions, while the Java and Perl counterparts do.\n\nFor comparison, there's also a test case for this implementation of \"strsplit\".\nin JavaScript.\n\nThe test cases here test both a simple string as a splitter (a space) and a\nsimple regular expression (`\\s+`, indicating some non-zero number of whitespace\ncharacters), as well as various values of the optional \"limit\" parameter.\n\nIn summary, in all of the cases tried, the Java and Perl implementations are\nidentical.  The Python implementation differs in a few ways:\n\n* The \"limit\" argument is off-by-one relative to the Java and Perl APIs.  It\n  represents the maximum number of splits to be made, rather than the maximum\n  number of returned fields.\n* -1 for \"limit\" is not special, and seems to mean that at most -1 splits will\n  be made, meaning the string is not split at all.  In Java and Perl, -1 means\n  there is no limit to the number of returned fields.\n* Java and Perl strip trailing empty fields when \"limit\" is 0.  Python never\n  strips trailing empty fields.\n\nJavaScript has a \"split\" method, but it behaves substantially different than all\nof these implementations when \"limit\" is specified.  This implementation of\n\"strsplit\" for JavaScript mirrors the Java and Perl implementations, as the\ndifferences in Python do not seem substantial or better.\n\nThe remaining use case that would be nice to address is splitting fields the way\nawk(1) and bash(1) do, which is to strip leading whitespace.  Python's *string*\nsplit also does this, but only if you specify None as the pattern.  strsplit\ndoesn't support this; just trim the string first if you want that behavior.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/davepacheco/node-strsplit/issues"
  },
  "homepage": "https://github.com/davepacheco/node-strsplit",
  "_id": "strsplit@1.0.0",
  "_shasum": "0fdedc68e91addcfcb2e6be9c262581a6e8c28aa",
  "_from": "strsplit@1.x",
  "_resolved": "https://registry.npmjs.org/strsplit/-/strsplit-1.0.0.tgz"
}
