#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2006 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
# Copyright 2012, Joyent, Inc.  All rights reserved.
#

OLD_CONF=/etc/default/syslogd
DFLT_SUM="7c87d765805cc45a0dad9fb5c86cc4f2"
CONF_SUM="$DFLT_SUM"

. /lib/svc/share/smf_include.sh

convert()
{
	svccfg -s svc:/system/system-log setprop config/log_from_remote = $1
	if [ $? -ne 0 ]; then
		svccfg -s svc:/system/system-log addpg config application
		svccfg -s svc:/system/system-log \
		    addpropvalue config/log_from_remote boolean: $1
		if [ $? -ne 0 ] ; then
			echo 'Failed to set remote syslog-logging'
			exit $SMF_EXIT_ERR_CONFIG
		fi
	fi
	echo "Incorporated ${OLD_CONF} settings into SMF. See syslogd(1m)."
	awk '{
		if ($1 ~ /^LOG_FROM_REMOTE=/) {
			print "# LOG_FROM_REMOTE is now set using "
			    "svccfg(1m), see syslog(1m).";
		} else {
			print $0;
		}
	}' ${OLD_CONF} >${OLD_CONF}.new && cp ${OLD_CONF}.new ${OLD_CONF}
	rm -f ${OLD_CONF}.new
}

#
# If the rsyslog.conf file doesn't exist and the syslog.conf file has not
# been customized, generate the default rsyslog.conf.
#
generate_rsyslog_conf()
{
	if [ ! -f /etc/syslog.conf ]; then
		return
	fi

	CONF_SUM=`nawk '{
	    if (substr($1, 1, 1) != "#" && NF != 0) print $0
	    }' /etc/syslog.conf | sum -x md5`

	if [ "$CONF_SUM" != "$DFLT_SUM" ]; then
		return
	fi

	cat <<-DONE >/etc/rsyslog.conf
	#
	# Sample rsyslog configuration file
	#

	$ModLoad immark
	$ModLoad imsolaris
	$ModLoad imtcp
	$ModLoad imudp

	*.err;kern.notice;auth.notice			/dev/sysmsg
	*.err;kern.debug;daemon.notice;mail.crit	/var/adm/messages

	*.alert;kern.err;daemon.err			operator
	*.alert						root

	*.emerg						*

	mail.debug					/var/log/syslog

	auth.info					/var/log/auth.log
	mail.info					/var/log/postfix.log
	DONE
}

if [ ! -f /etc/rsyslog.conf -a -x /usr/sbin/rsyslogd ]; then
	generate_rsyslog_conf
fi

if [ -f /etc/rsyslog.conf ]; then
	if [ ! -x /usr/sbin/rsyslogd ]; then
		echo "/etc/rsyslog.conf is missing. Exiting."
		exit $SMF_EXIT_ERR_CONFIG
	fi
else
	#
	# Fall back to old syslogd
	#
	if [ ! -f /etc/syslog.conf ]; then
		echo "/etc/syslog.conf is missing. Exiting."
		exit $SMF_EXIT_ERR_CONFIG
	fi

	if [ ! -x /usr/sbin/syslogd ]; then
		echo "Executable /usr/sbin/syslogd not found. Exiting"
		exit $SMF_EXIT_ERR_CONFIG
	fi
fi

if smf_is_globalzone; then
	#
	# Before syslogd starts, save any messages from
	# previous crash dumps so that messages appear
	# in chronological order.
	#
	/usr/bin/savecore -m
	if [ -r /etc/dumpadm.conf ]; then
		. /etc/dumpadm.conf
		[ -n "$DUMPADM_DEVICE" -a \
	    	"x$DUMPADM_DEVICE" != xswap ] && \
	    	/usr/bin/savecore -m -f $DUMPADM_DEVICE
	fi
fi
if [ ! -f /var/adm/messages ]; then
	/usr/bin/cp /dev/null /var/adm/messages
	/usr/bin/chmod 0644 /var/adm/messages
fi

if [ -f /etc/rsyslog.conf ]; then
	#
	# If we have a config file for the old syslogd, only run rsyslogd
	# if there are no customizations in the old syslog.conf file.
	#
	if [ -f /etc/syslog.conf ]; then
		CONF_SUM=`nawk '{
		    if (substr($1, 1, 1) != "#" && NF != 0) print $0
		    }' /etc/syslog.conf | sum -x md5`
	fi

	if [ "$CONF_SUM" == "$DFLT_SUM" ]; then
		/usr/sbin/rsyslogd -c5 -n &
		exit $SMF_EXIT_OK
	fi
fi

#
# Run the old syslogd
#
remote=`awk -F= '
	/^LOG_FROM_REMOTE=[yY][Ee][Ss]/ {print "true"}
	/^LOG_FROM_REMOTE=[Nn][Oo]/     {print "false"}' < ${OLD_CONF}`
case ${remote} in
"")
    ;;
"true"|"false")
    convert ${remote}
    ;;
*)
    echo "Unsupported value in for LOG_FROM_REMOTE in ${OLD_CONF}"
    exit $SMF_EXIT_ERR_CONFIG
    ;;
esac

/usr/sbin/syslogd >/dev/msglog 2>&1 &

if [ -f /etc/rsyslog.conf ]; then
	logger -p daemon.err \
	    "Not using rsyslogd because there is a custom /etc/syslog.conf file"
fi

exit $SMF_EXIT_OK
