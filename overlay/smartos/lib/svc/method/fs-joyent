#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at COPYING
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at COPYING.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright (c) 2010,2011 Joyent Inc.

set -o xtrace

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

# first of all, if we aren't the global zone this doesn't make any sense to run

smf_is_globalzone || exit $SMF_EXIT_OK

# Need to run syseventd now because it talks to devfs to create /dev/dsk
# so that we can try to import the zpool.
/usr/lib/sysevent/syseventd

function destroy_zpools
{
    for pool in $(zpool list -p -o name | grep -v NAME) ; do
        zpool destroy -f ${pool}
    done
}

/bin/bootparams | grep "^noimport=true" >/dev/null
if [ $? -ne 0 ]; then
    # If the zpool doesn't exist, then there's nothing to mount.

    # Assume the system zpool is zones, but if a different system pool
    # identifies itself (by virtue of the .system_pool file being present in the
    # pool's root dataset), then use that system pool instead.
    SYS_ZPOOL=zones
    
    # Import specified zpools, or all zpools available
    pools=$(/bin/bootparams | egrep "^zpools?=" | cut -d= -f2 | tr , ' ')
    if [ -z ${pools} ]; then
         pools=$(zpool import | grep "pool:" | awk '{print $2}')
    fi

    for pool in $pools; do
        zpool import -f $pool
        if [[ -f /$pool/.system_pool ]]; then
            SYS_ZPOOL=$pool
        fi
    done

    svccfg -s svc:/system/smartdc/init setprop \
        config/zpool=${SYS_ZPOOL}
    svccfg -s svc:/system/smartdc/init:default refresh

    # If the destroy_zpools boot parameter is set, destroy all zpools
    /bin/bootparams | grep "^destroy_zpools=true" >/dev/null
    if [ $? -eq 0 ]; then
        destroy_zpools
    fi

    # A machine is reset to its original unsetup state (i.e. a 'factory reset')
    # when the smartdc:factoryreset ZFS user property is set on the var dataset.
    reset=$(zfs get -H -o value smartdc:factoryreset ${SYS_ZPOOL}/var)
    if [ ${reset} == "yes" ]; then
        destroy_zpools
    fi

    # For the system zpool, mount and configure all system datasets
    zpool status -v ${SYS_ZPOOL}
    if [ $? -eq 0 ]; then 
        mount -F zfs ${SYS_ZPOOL}/var /var
        mount -F zfs ${SYS_ZPOOL}/config /etc/zones
        mount -F zfs ${SYS_ZPOOL}/opt /opt
        if [[ -n $(/bin/bootparams | grep '^headnode=true') ]]; then 
          mkdir -p /opt/smartdc/agents/smf
          mount -O -F lofs /var/svc/manifest/site /opt/smartdc/agents/smf
        fi

  if [[ -n $(/bin/bootparams | grep '^headnode=true') || \
        -n $(/bin/bootparams | grep '^smartos=true') ]]; then
        mkdir /usbkey
    mount -F zfs ${SYS_ZPOOL}/usbkey /usbkey
  fi
  if [[ -n $(/bin/bootparams | grep '^smartos=true') ]]; then
    mount -F lofs /usbkey/shadow /etc/shadow
    mount -F lofs /usbkey/ssh /etc/ssh
  fi

  swap -a /dev/zvol/dsk/${SYS_ZPOOL}/swap
	dumpadm -y -d /dev/zvol/dsk/${SYS_ZPOOL}/dump

	ln -s /${SYS_ZPOOL}/global/cores /cores

	[[ -f /${SYS_ZPOOL}/currbooted ]] && \
            mv /${SYS_ZPOOL}/currbooted /${SYS_ZPOOL}/lastbooted
	uname -v >/${SYS_ZPOOL}/currbooted
    fi
fi

# The rest only applies to the headnode
/bin/bootparams | grep "^headnode=true" >/dev/null || exit $SMF_EXIT_OK

USBMOUNTPOINT=/mnt/`svcprop -p "joyentfs/usb_mountpoint" ${SMF_FMRI}`
COPYINPOINT=`svcprop -p "joyentfs/usb_copy_path" ${SMF_FMRI}`
DEBUG=`svcprop -p "joyentfs/debug" ${SMF_FMRI}`

mount_usb_msg=""

if [[ -d /mnt ]]; then
    chown root:root /mnt
    chmod 700 /mnt
else
    mkdir -m 700 /mnt
fi

function make_usb_copy
{
    $(cd ${USBMOUNTPOINT}; rsync -a --exclude private --exclude os * ${COPYINPOINT})
    if [[ -d ${USBMOUNTPOINT}/os ]]; then
        (cd ${USBMOUNTPOINT}/os ; \
            for dir in $(ls -d *); do
                # source comes from pcfs which we've got lowering the case
                # of everything, but we normally use capital T and Z for
                # buildstamp, so fix it here.
                source_dir=${dir}
                target_dir=$(echo ${dir} | tr "[:lower:]" "[:upper:]")
                mkdir -p ${COPYINPOINT}/os
                rsync -a ${source_dir}/ ${COPYINPOINT}/os/${target_dir}
            done
        )
    fi
}

mkdir -p ${USBMOUNTPOINT}

if [[ -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    mount_usb_msg="already mounted"

    zpool list | grep zones
    if [[ $? == 0 ]]; then
        make_usb_copy
        exit $?
    fi
    exit 0;
fi

# First thing to do is to mount the USB key / VMWare disk
USBKEYS=`/usr/bin/disklist -a`
for key in ${USBKEYS}; do
    if [[ `/usr/sbin/fstyp /dev/dsk/${key}p0:1` == 'pcfs' ]]; then
        /usr/sbin/mount -F pcfs -o foldcase,noatime /dev/dsk/${key}p0:1 \
            ${USBMOUNTPOINT};
        if [[ $? == "0" ]]; then
            if [[ ! -f ${USBMOUNTPOINT}/.joyliveusb ]]; then
                if [[ ${DEBUG} == "true" ]]; then
                    mount_usb_msg="${mount_usb_msg}\n[debug] didn't find ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${key}p0:1"
                fi
                /usr/sbin/umount ${USBMOUNTPOINT};
            else
                if [[ ${DEBUG} == "true" ]]; then
                    mount_usb_msg="${mount_usb_msg}\n[debug] found ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${key}p0:1"
                fi
                break;
            fi
        elif [[ ${DEBUG} == "true" ]]; then
            mount_usb_msg="${mount_usb_msg}\n[debug] mount failed for pcfs /dev/dsk/${key}p0:1"
        fi
    elif [[ ${DEBUG} == "true" ]]; then
        mount_usb_msg="${mount_usb_msg}\n[debug] /dev/dsk/${key}p0:1 is not pcfs"
    fi
done

if [[ ! -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    # we're probably VMWare, so we're looking at a non-USB disk.
    for disk in `/usr/bin/disklist -a`; do
        if [[ `/usr/sbin/fstyp /dev/dsk/${disk}p1` == 'pcfs' ]]; then
            /usr/sbin/mount -F pcfs -o foldcase,noatime /dev/dsk/${disk}p1 \
                ${USBMOUNTPOINT};
            if [[ $? == "0" ]]; then
                if [[ ! -f ${USBMOUNTPOINT}/.joyliveusb ]]; then
                    if [[ ${DEBUG} == "true" ]]; then
                        mount_usb_msg="${mount_usb_msg}\n[debug] didn't find ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${disk}p1"
                    fi
                    /usr/sbin/umount ${USBMOUNTPOINT};
                else
                    if [[ ${DEBUG} == "true" ]]; then
                        mount_usb_msg="${mount_usb_msg}\n[debug] found ${USBMOUNTPOINT}/.joyliveusb on pcfs /dev/dsk/${disk}p1"
                    fi
                    break;
                fi
            elif [[ ${DEBUG} == "true" ]]; then
                mount_usb_msg="${mount_usb_msg}\n[debug] unable to mount /dev/dsk/${disk}p1"
            fi
        elif [[ ${DEBUG} == "true" ]]; then
            mount_usb_msg="${mount_usb_msg}\n[debug] /dev/dsk/${disk}p1 is not pcfs"
        fi
    done
fi

if [[ -f "${USBMOUNTPOINT}/.joyliveusb" ]]; then
    mount_usb_msg="success"

    zpool list | grep zones

    if [[ $? == 0 ]]; then
        make_usb_copy
    fi

    exit 0;
fi

mount_usb_msg="${mount_usb_msg}\n[FATAL] mount_usb(): could not find USB Key"
exit 1;
