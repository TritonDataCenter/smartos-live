/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2015, Joyent, Inc. All rights reserved.
 *
 */

// Ensure we're using the platform's node
// XXX TODO update this when it's been moved.
// require('/usr/node/node_modules/platform_node_version').assert();

var assert = require('assert');
var cp = require('child_process');
var kstat = require('/usr/node/node_modules/kstat');
var props = require('/usr/vm/node_modules/props');
var spawn = cp.spawn;
var utils = require('utils');

// utils
var isUUID = utils.isUUID;
var rtrim = utils.rtrim;

var ZONEINFO_FIELDS = props.ZONEINFO_FIELDS;
var ZONEINFO_PROPERTIES = props.ZONEINFO_PROPERTIES;
var ZONE_MISC_READER = new kstat.Reader({
    'class': 'zone_misc',
    module: 'zones'
});

/*
 * getZoneinfo() takes a uuid|zonename|null as the first option and
 * attempts to gather the data from kstats for this zone.
 *
 * The passed in callback function will be called with:
 *
 *   callback(err, results)
 *
 * with err being set (will be an Error object) only on error and results being
 * an object keyed by uuid of the data found for the system's zones. The data
 * for each zone will look something like:
 *
 *     zonename: '2a85ce72-e135-c901-f233-96995cab82ca',
 *     nsec_user: 62924235726,
 *     nsec_sys: 23783275604,
 *     nsec_waitrq: 26293579998,
 *     avenrun_1min: 0,
 *     avenrun_5min: 0,
 *     avenrun_15min: 0,
 *     forkfail_cap: 0,
 *     forkfail_noproc: 0,
 *     forkfail_nomem: 0,
 *     forkfail_misc: 0,
 *     init_pid: 6841,
 *     boot_time: 1430183276
 *
 * but we will only include fields that are in proptable.js and we'll include
 * them with their vmobj names and *after* translation if a loadValueTranslator
 * is defined.
 *
 * NOTE: as this data comes from the kernel, it is only available for running
 * zones.
 */
function getZoneinfo(uuid, options, callback)
{
    var clean_obj;
    var idx = 0;
    var _kstat;
    var log = options.log;
    var obj;
    var results = {};

    _kstat = ZONE_MISC_READER.read();

    for (idx = 0; idx < _kstat.length; idx++) {
        clean_obj = {};
        obj = _kstat[idx].data;
        if (obj && isUUID(obj.zonename) && (!uuid || (obj.zonename === uuid))) {
            Object.keys(ZONEINFO_PROPERTIES).forEach(function (_key) {
                var field = ZONEINFO_PROPERTIES[_key].field; // the vmobj name
                var value = obj[_key];

                if (ZONEINFO_PROPERTIES[_key].loadValueTranslator) {
                    value
                        = ZONEINFO_PROPERTIES[_key].loadValueTranslator(value);
                }

                clean_obj[field] = value;
            });
            results[obj.zonename] = clean_obj;
        } else if (log && _kstat[idx].error) {
            log.debug({error: _kstat[idx].error, zonename: _kstat[idx].name},
                'error loading kstat');
        }
    }

    callback(null, results);
}

module.exports = {
    getZoneinfo: getZoneinfo
};
