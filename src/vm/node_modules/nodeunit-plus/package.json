{
  "name": "nodeunit-plus",
  "version": "0.0.1",
  "description": "An API for nodeunit that looks like node-tap",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mcavage/nodeunit-plus.git"
  },
  "author": {
    "name": "Mark Cavage",
    "email": "mcavage@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mcavage/nodeunit-plus/issues"
  },
  "dependencies": {
    "bunyan": "0.22.0",
    "once": "1.3.0"
  },
  "devDependencies": {
    "nodeunit": "0.8.1"
  },
  "scripts": {
    "test": "nodeunit test/test.js"
  },
  "readme": "# tl;dr\n\nNode.js unit testing is kind of a ghetto. Most of the runners have some\ngoofy side-effect that makes me hate them.\n[nodeunit](https://github.com/caolan/nodeunit) is the only one I've used\nthat I like the way it acts, but the API is pretty ugly.  This is a simple\nwrapper that makes it look sane, with `before`, `after`, and `test`.\n\nIt also wraps up everything into domains so that random uncaught stuff actually\nworks with the test framework.\n\n# Usage\n\n```javascript\nvar http = require('http');\n\n// This does hack up the global namespace so you don't have to put some\n// var test = nodeunitPlus.test; at the top of every file.\nrequire('../index');\n\n\nbefore(function (cb) {\n    this.server = http.createServer(function (req, res) {\n       res.writeHead(200);\n       res.end();\n    });\n    this.server.listen(cb);\n});\n\n\nafter(function (cb) {\n    this.server.close(cb);\n});\n\n\ntest('get /', function (t) {\n    var opts = {\n        agent: false,\n        hostname: '127.0.0.1',\n        port: this.server.address().port,\n        path: '/'\n    };\n    http.get(opts, function (res) {\n        t.ok(res);\n        t.equal(res.statusCode, 200);\n        t.end();\n    });\n});\n```\n\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/mcavage/nodeunit-plus",
  "_id": "nodeunit-plus@0.0.1",
  "_from": "nodeunit-plus@0.0.1"
}
