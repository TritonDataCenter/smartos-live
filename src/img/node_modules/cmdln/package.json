{
  "name": "cmdln",
  "version": "3.2.1",
  "description": "helper lib for creating CLI tools with subcommands; think `git`, `svn`, `zfs`",
  "author": {
    "name": "Trent Mick",
    "url": "http://trentm.com"
  },
  "main": "./lib/cmdln.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/trentm/node-cmdln.git"
  },
  "engines": [
    "node >=0.8.0"
  ],
  "keywords": [
    "cmdln",
    "cli",
    "tool"
  ],
  "dependencies": {
    "assert-plus": "^0.1.5",
    "extsprintf": "^1.2.0",
    "verror": "^1.6.0",
    "dashdash": "^1.7.1"
  },
  "devDependencies": {
    "nodeunit": "0.9.0"
  },
  "readme": "`node-cmdln` is a node.js helper lib for creating CLI tools with subcommands\n(think `git`, `svn`, `zfs`, `brew`, etc.). It is a sister of my earlier\n[Python lib for this](https://github.com/trentm/cmdln).\n\nFollow <a href=\"https://twitter.com/intent/user?screen_name=trentmick\" target=\"_blank\">@trentmick</a>\nfor updates to node-cmdln.\n\n\n# Usage\n\nYou define a subclass of `Cmdln` and subcommands as `do_NAME` methods.\nMinimally you could have a \"conan.js\" as follows:\n\n```javascript\n#!/usr/bin/env node\nvar util = require('util');\nvar cmdln = require('cmdln');\n\nfunction Conan() {\n    cmdln.Cmdln.call(this, {\n        name: 'conan',\n        desc: 'What is best in life?'\n    });\n}\nutil.inherits(Conan, cmdln.Cmdln);\n\nConan.prototype.do_crush = function do_crush(subcmd, opts, args, cb) {\n    console.log('Yargh!');\n    cb();\n};\nConan.prototype.do_crush.help = 'Crush your enemies.';\n\ncmdln.main(new Conan());  // mainline\n```\n\nWith this, you get the following behaviour:\n\n```bash\n$ node examples/conan.js\nWhat is best in life?\n\nUsage:\n    conan [OPTIONS] COMMAND [ARGS...]\n    conan help COMMAND\n\nOptions:\n    -h, --help      Show this help message and exit.\n\nCommands:\n    help (?)        Help on a specific sub-command.\n    crush           Crush your enemies.\n\n$ node examples/conan.js help crush\nCrush your enemies.\n\n$ node examples/conan.js crush\nYargh!\n```\n\n\n# Option processing\n\nOption processing (using [dashdash](https://github.com/trentm/node-dashdash))\nis integrated. `do_crush` above could be replaced with:\n\n```javascript\nConan.prototype.do_crush = function (subcmd, opts, args, cb) {\n    if (opts.help) {\n        this.do_help('help', {}, [subcmd], cb);\n        return;\n    }\n    if (!args.length) {\n        console.log('No enemies? Yarg!');\n    } else {\n        args.forEach(function (enemy) {\n            console.log('Smite %s with a %s!', enemy, opts.weapon);\n        });\n    }\n    cb();\n};\nConan.prototype.do_crush.options = [\n    {\n        names: ['help', 'h'],\n        type: 'bool',\n        help: 'Show this help.'\n    },\n    {\n        names: ['weapon', 'w'],\n        helpArg: 'WEAPON',\n        type: 'string',\n        default: 'sword',\n        help: 'Weapon with which to smite.'\n    }\n];\nConan.prototype.do_crush.help = (\n    'Crush your enemies.\\n'\n    + '\\n'\n    + 'Usage:\\n'\n    + '     {{name}} crush [OPTIONS] [ENEMIES...]\\n'\n    + '\\n'\n    + '{{options}}'\n);\n```\n\nThen we get this behaviour:\n\n```bash\n$ node examples/conan.js crush Bob\nSmite Bob with a sword!\n\n$ node examples/conan.js crush Bob Linda --weapon mattock\nSmite Bob with a mattock!\nSmite Linda with a mattock!\n\n$ node examples/conan.js crush -h\nCrush your enemies.\n\nUsage:\n     conan crush [OPTIONS] [ENEMIES...]\n\nOptions:\n    -h, --help                  Show this help.\n    -w WEAPON, --weapon=WEAPON  Weapon with which to smite.\n```\n\n\nSee [examples/conan.js](examples/conan.js) for the complete example. Run\n`node example/conan.js ...` to try it out.\n\n\n# Reference\n\nIn general, please read the comments in [the source](./lib/cmdln.js) and\n[browse the examples](./examples/). The API is far from fully documented here.\n\n## `cmdln.Cmdln`\n\nTo use this module you create a class that inherits from `cmdln.Cmdln`; add\nsome methods to that class that define the tool's commands, options, etc.;\nthen pass an instance to `cmdln.main()`. Roughly like this:\n\n    function CLI() {\n        cmdln.Cmdln.call(this, {<config>});\n    }\n    util.inherits(CLI, cmdln.Cmdln);\n    ...\n    var cli = new CLI();\n    cmdln.main(cli);\n\nWe'll use the `CLI` and `cli` names as used above in the following reference:\n\n- `new Cmdln(<config>)` Create a Cmdln subclass instance. See the block comment\n  in the code for full documentation on the `config` options.\n\n- `CLI.prototype.do_<subcmd> = function (subcmd, opts, args, cb)` is how a\n  subcommand is defined. How the subcmd is handled can be customize with some\n  properties (e.g. `options`, `help`) on the handler function.\n\n- `CLI.prototype.do_<subcmd> = <SubCLI>;` Instead of a function handler for a\n  subcommand, a `do_<subcmd>` can be set to another Cmdln subclass to support\n  sub-subcommands, like `git remote add|remove|rename|...`. See\n  [\"examples/fauxgit.js\"](./examples/fauxgit.js) for an example.\n\n- `CLI.prototype.do_<subcmd>.aliases = <array of strings>;` to define one or\n  more aliases for a command. These aliases are shown in the \"Commands:\"\n  section of the generated help output.\n\n- `CLI.prototype.do_<subcmd>.hiddenAliases = <array of strings>;` to define one\n  or more aliases for a command **that are not shown in the generated help\n  output**. This can be useful when renaming a subcommand in a new version of\n  a tool and still support the old name.\n\n- `CLI.prototype.do_<subcmd>.options = <object>;` is how to set the options\n  (in [dashdash](https://github.com/trentm/node-dashdash) format) for that\n  subcommand.\n\n- `CLI.prototype.do_<subcmd>.helpOpts = <dashdash helpOpts object>;` to override\n  formatting settings for `options` help output for this command. By default\n  the `helpOpts` passed into the CLI constructor are used. The set of supported\n  helpOpts are defined by\n  [dashdash](https://github.com/trentm/node-dashdash#help-config).\n\n- `CLI.prototype.do_<subcmd>.help = <string>;` to set the help string for a\n  subcommand.\n\n- `CLI.prototype.do_<subcmd>.help = function (subcmd, opts, args, cb)` is\n  an alternate method to handle help for a subcommand. The given function\n  will be run when `tool help <subcmd>` is called.\n\n- `CLI.prototype.do_<subcmd>.desc = <string>;` can be set to a short string\n  to be used in the `tool help` output to summarize subcmd. If not provided,\n  then the first line of `do_<subcmd>.help` will be used.\n\n- `CLI.prototype.do_<subcmd>.hidden = <boolean>;` Set to false to have\n  `tool help` output *not* list this subcmd.\n\n- `<Cmdln>.prototype.init(opts, args, cb)` Hook run after option processing\n  (`this.opts` is set), but before the subcommand handler is run.\n\n- `<Cmdln>.prototype.fini(subcmd, cb)` Hook run after the subcommand handler is\n  run.\n\n- `<Cmdln>.showErrStack` boolean. Set to true to have `cmdln.main()`, if used,\n  print a full stack on a shown error. When wanted, this is typically set\n  in If you want this option it is typically\n  set either\n\n- `<Cmdln>.handlerFromSubcmd(<subcmd>)` will return the appropriate\n  `do_<subcmd>` method that handles the given sub-command. This resolves\n  sub-command aliases.\n\n- `<Cmdln>.helpFromSubcmd(<subcmd>)` will return the help string for\n  that subcmd *or*, if defined, the help function defined for that subcmd.\n  This is used by the default `do_help` implementation.\n\n\n## `cmdln.main()`\n\nThis is a convenience method for driving the mainline of your script using\nthe your defined `Cmdln` subclass. There are a number of options to control\nhow it works. Read the block comment on that function in \"lib/cmdln.js\" for\nthe best docs.\n\n\n# License\n\nMIT. See LICENSE.txt\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/trentm/node-cmdln/issues"
  },
  "homepage": "https://github.com/trentm/node-cmdln",
  "_id": "cmdln@3.2.1",
  "_shasum": "8d21967625b25ee35fca8e8453ccf10fccd04e45",
  "_from": "cmdln@3.2.1"
}
