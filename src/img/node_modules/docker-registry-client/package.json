{
  "name": "docker-registry-client",
  "version": "1.0.0",
  "description": "client for the Docker Registry API",
  "author": {
    "name": "Joyent",
    "url": "joyent.com"
  },
  "main": "./lib/index.js",
  "dependencies": {
    "assert-plus": "^0.1.5",
    "bunyan": "1.x >=1.3.3",
    "restify": "2.8.x >=2.8.5",
    "strsplit": "1.x",
    "tough-cookie": "0.13.x",
    "vasync": "1.x >=1.6.1",
    "verror": "1.x >=1.6.0"
  },
  "devDependencies": {
    "dashdash": "1.x",
    "read": "1.x",
    "tape": "4.x"
  },
  "engines": {
    "node": ">=0.10"
  },
  "keywords": [
    "docker",
    "client",
    "api",
    "registry",
    "index",
    "hub"
  ],
  "license": "MPL-2.0",
  "readme": "# node-docker-registry-client\n\nA Docker Registry API client for node.js.\nLimitation: Currently on v1 of the Registry API is implemented. Support for v2\nis planned.\n\nXXX docs are out of date for the 1.0.0 re-write.\n\n\n## Terminology\n\n(I'm talking v1 here. v2 support will come later.)\n\nThe \"Docker Registry\" docs can be a little confusing. There are two APIs in\nplay: the Index API (sometimes called the \"Hub API\") and the Registry API. There\nare a few auth-related endpoints and headers. Standalone registries (i.e. those\nnot connected with Docker Hub) and Docker Hub use different auth mechanisms.\n\"Image\" is commonly used when referring to a repo. \"The Registry\" is often used\nwhen referring to the docker Hub/Index. My understanding with v2 work is that\nthe concept of \"Index\" as separate from \"Registry\" is going away, though\nthe field name \"Index\" remains in code (both in docker.git and in this\nmodule for comparability).\n\nWorking with Docker images involves the following types of things:\n\n- index: The central Docker Hub API to handle Token-based auth for registries\n  associated with Docker Hub (this seems to be only used by Docker Hub itself)\n  and (theoretically) discovery of repositores in various registries.\n- registry: A server that holds Docker image repositories.\n- repositories: Images are grouped into named `repos`, e.g.\n  [\"google/python\"](https://registry.hub.docker.com/u/google/python/),\n  [\"library/mongo\"](https://registry.hub.docker.com/u/library/mongo/).\n  On the \"official\" Docker Hub registry the \"library\" `namespace` are\n  special \"official\" repos managed by Docker, Inc. All the images (that is to\n  say, the image *data*) in a given repository are hosted by a single registry.\n- repository tags: A repository typically tags a set of its images with\n  short names, e.g. \"2.7\" in \"library/mongo:2.7\". Tags are commonly used in\n  the docker CLI when running containers. If a tag isn't specified the \"latest\"\n  tag is implied -- note that \"latest\" isn't necessarily the *latest* image.\n  Which image id a tag points to can change over time. The repository tags\n  mapping lives in the registry.\n- image ids: A globally unique 64-char hex string identifying a particular\n  image, e.g. \"3ce54e911389a2b08207b0a4d01c3131ce01b617ecc1c248f6d81ffdbebd628d\".\n  Typically this is abbreviated in client usage to 12 chars: \"3ce54e911389\".\n- layers: I'm using \"layer\" and \"image\" interchangeably.  Images are built up\n  in layers.  Each image has a parent, until the base layer. This chain\n  forms the \"history\" (see `docker history <image>`), aka \"ancestry\"\n  (see <https://docs.docker.com/reference/api/registry_api/#get-image-ancestry>).\n  With Docker Registry API v2 these won't be interchangeable in the\n  registry implementation, but for compat with older Docker the separate ID\n  for each layer remains.\n\nSome relevant links:\n\n- <https://docs.docker.com/reference/api/hub_registry_spec/>\n- <https://docs.docker.com/reference/api/registry_api/>\n- <https://docs.docker.com/reference/api/docker-io_api/>\n\n\n## Names\n\nMost usage of this package involves creating a Registry client and calling\nits methods. A Registry client requires a repository name:\n\n    [INDEX/]NAME                # a \"repo name\"\n\nExamples:\n\n    mongo                       # implies default index (docker.io) and namespace (library)\n    docker.io/mongo             # same thing\n    docker.io/library/mongo     # same thing\n\n    myreg.example.com:5000/busybox   # a \"busybox\" repo on a private registry\n\nThe `parseRepo` function is used to parse these. See \"examples/parseRepo.js\"\nto see how they are parsed:\n\n    $ node examples/parseRepo.js mongo\n    {\n        \"index\": {\n            \"name\": \"docker.io\",\n            \"official\": true\n        },\n        \"official\": true,\n        \"remoteName\": \"library/mongo\",\n        \"localName\": \"mongo\",\n        \"canonicalName\": \"docker.io/mongo\"\n    }\n\n\nCommonly, a \"repo name and tag\" string is used for working with a Docker\nregistry, e.g. `docker pull busybox:latest`. This package provides\n`parseRepoAndTag` for that, e.g.:\n\n    $ node examples/parseRepoAndTag.js myreg.example.com:5000/busybox:foo\n    {\n        \"index\": {\n            \"name\": \"myreg.example.com:5000\",\n            \"official\": false\n        },\n        \"official\": false,\n        \"remoteName\": \"busybox\",\n        \"localName\": \"myreg.example.com:5000/busybox\",\n        \"canonicalName\": \"myreg.example.com:5000/busybox\",\n        \"tag\": \"foo\"\n    }\n\n\nSlightly different than docker.git's parsing, this package allows the\nscheme to be given on the index:\n\n\n    $ node examples/parseRepoAndTag.js https://quay.io/trentm/foo\n    {\n        \"index\": {\n            \"scheme\": \"https\",              // <--- scheme\n            \"name\": \"quay.io\",\n            \"official\": false\n        },\n        \"official\": false,\n        \"remoteName\": \"trentm/foo\",\n        \"localName\": \"quay.io/trentm/foo\",\n        \"canonicalName\": \"quay.io/trentm/foo\",\n        \"tag\": \"latest\"                     // <--- default to 'latest' tag\n    }\n\n\n## Registry client\n\nTypically:\n\n    var client = drc.createClient({\n        name: name,\n        agent: false,              // optional\n        log: log,                  // optional\n        username: opts.username,   // optional\n        password: opts.password,   // optional\n        // ... see the source code\n    });\n    client.listRepoTags(function (err, repoTags) {\n        if (err) {\n            console.log(err);\n            process.exit(1);\n        }\n        console.log(JSON.stringify(repoTags, null, 4));\n    });\n\n\nSee \"examples/\" for example usage of all (most?) of the API.\n\n\n## Dev Notes\n\nFor naming this package attempts to consistently use `repo` for repository,\n`img` for image, etc.\n",
  "readmeFilename": "README.md",
  "_id": "docker-registry-client@1.0.0",
  "_shasum": "1d574ee4f88e4292ba70a098ef519ceff62d8ea3",
  "_resolved": "git://github.com/joyent/node-docker-registry-client.git#765e74c6571752092be3cbd89d7c12b35d43a582",
  "_from": "docker-registry-client@git://github.com/joyent/node-docker-registry-client.git#765e74c"
}
