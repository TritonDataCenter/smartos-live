/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at http://smartos.org/CDDL
 *
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file.
 *
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright (c) 2015, Joyent, Inc. All rights reserved.
 *
 */

/*
 * !!IMPORTANT!!
 *
 * If you modify anything in this file, you need to regenerate props.js using:
 *
 *   /path/to/node expander.js > props.js
 *
 * before any changes take effect.
 *
 */

// values used in feature table for KVM
var KVM_MEM_OVERHEAD = 1024;
var KVM_MIN_MEM_OVERHEAD = 256;

// export this so tests can ensure we've set this correctly.
exports.KVM_MEM_OVERHEAD = KVM_MEM_OVERHEAD;

/*
 * Every property that exists in a VM Object and/or can be passed in as part
 * of a payload must be in this table. The expander.js tool is used to build
 * this into a set of other tables in props.js that are used by the various
 * components that deal with VM objects.
 *
 * Each member of the 'properties' object should have the payload/property name
 * as the key and as the value it should have an object with one or more of the
 * following members:
 *
 *  deprecated:
 *
 *    This means the property can still exist but use is no longer recommended
 *    and support will be removed in the future. A warning message should be
 *    logged whenever a deprecated property is used.
 *
 *
 *  flattenable: ['array', 'array_hash_key', 'hash_key']
 *
 *    This is used when 'flattening' an object to contain only key-value pairs.
 *    Primarily it is used for things like lookup where you're trying to match
 *    VMs with a property.
 *
 *    If the value is 'array', it means when you have something like:
 *
 *      "resolvers": ["8.8.8.8", "8.8.4.4"]
 *
 *    that resolvers.0 would be a valid key and refer here to "8.8.8.8".
 *
 *    If the value is 'array_hash_key', it means when you have something like:
 *
 *      "disks": [{"path": "...", "size": 10240}, ...]
 *
 *    that disks.0.size would flatten to 10240.
 *
 *    If the value is 'hash_key', it means that when you have something like:
 *
 *      "tags": ["foo": "bar", "hello": "world", ...]
 *
 *    that tags.hello would flatten to 'world'.
 *
 *
 *  ignore:
 *
 *    This can be added for a property when we want to acknowledge that a
 *    property exists but specifically do not want to load it into VM objects.
 *    This prevents these properties from emitting warnings into logs.
 *
 *    For Example:
 *
 *    {
 *      debug_id: {
 *        ...
 *        ignore: true,
 *        zonexml: 'zone.debugid'
 *      }
 *    }
 *
 *    means that if we see 'zone.debugid' in the XML we should not treat this
 *    as an unknown property, but that we also shouldn't load that into any
 *    property in the VM object. It will be silently ignored.
 *
 *
 *  json:
 *
 *    This indicates that the value comes from one of the files in:
 *
 *      <zonepath>/config/<filename>.json
 *
 *    and when loaded, data should be added to VM objects with the name being
 *    the property and value being the JSON contents retrieved from the files.
 *
 *    Example:
 *
 *      {
 *        customer_metadata: {
 *          ...
 *          json: 'customer_metadata',
 *          ...
 *        }
 *      }
 *
 *    indicates that if the 'customer_metadata' key is found in the JSON (it
 *    lives in <zonepath>/config/metadata.json), the value stored in the file
 *    will be set as the 'customer_metadata' value in the VM object.
 *
 *
 *  load_depends:
 *
 *    This is an array of other properties which must be loaded in order for
 *    this property to be loaded. For example the 'missing' property only makes
 *    sense when state === 'receiving', so this has "depends: ['state']" so we
 *    know that state must also be loaded when we're asking for 'missing'.
 *
 *
 *  loadValueTranslator:
 *
 *    Currently only used when the property is being loaded from the zone XML
 *    file or pulled from kstat (see 'zoneinfo'). This means that you must also
 *    have a 'zonexml' or 'zoneinfo' value for this property. When this is set,
 *    values will be passed through the specified function while being loaded.
 *    This is used for example to ensure that values that should be numbers or
 *    booleans are converted from strings as often in zonecfg the only option
 *    for type is 'string'.
 *
 *    Example:
 *
 *      loadValueTranslator: 'utils.unbase64'
 *
 *    This assumes the value will be stored as a base64 string and will decode
 *    it when read so that the VM object will have the decoded value.
 *
 *
 *  payload: {payload details}
 *
 *    This indicates that this property can be used in a payload for one of
 *    the vmadm actions. This itself can have the following properties:
 *
 *      'allowed': (required) an object with brand names as keys and a list
 *                 of actions this payload property can be specified with
 *      'check_as': (optional) for properties like add_disks we want to
 *                  validate as though it were 'disks'
 *      'keep_zero': (optional) normally updating an integer property with value
 *                   0 unsets that property, removing from the object entirely.
 *                   If the 'type' is set to 'integer' you can set this true in
 *                   order to keep the property on the object, just setting the
 *                   value to 0.
 *      'required': (optional) an object with brand names as keys and a list
 *                  of actions this payload property *must* be specified with
 *      'type': (required) the type of this property (for validation)
 *
 *    Valid property types are:
 *
 *      object-array - an array of objects
 *      boolean      - true or false
 *      flat-object  - an object that has only string properties
 *      integer      - integers only
 *      list         - Either comma separated or array list of strings or ints
 *      string       - Simple string
 *      uuid         - A standard 00000000-0000-0000-0000-000000000000 type uuid
 *      zpool        - The name of an existing zpool
 *
 *
 *  sysinfo:
 *
 *    The presence of this field means that the property comes from the sysinfo
 *    tool. The value should be one of the fields seen with `sysinfo -j`.
 *
 *
 *  zfs: {fields: [], types: []}
 *
 *    The existence of 'zfs' for a property indicates that the property may
 *    require zfs data to be loaded. The 'fields' member should be an array of
 *    zfs field names (passed to zfs list -o) and 'types' should be a list of
 *    types for which we want this field (passed to -t).
 *
 *
 *  zoneinfo: <property string>
 *
 *    If this exists for a property, it indicates that <property string> is a
 *    property from the zone_misc kstats that should be included in this VM
 *    object. You can see the available fields with:
 *
 *        kstat -c zone_misc -m zones
 *
 *
 *  zonexml: <property string>
 *
 *    If this exists for a property in this table, it indicates that the
 *    when <property string> is seen in a zone's XML file, it should be included
 *    in the VM object named after its name in the table.
 *
 *    For example:
 *
 *    {
 *      ...
 *      billing_id: {
 *          ...
 *          zonexml: 'zone.attr.billing-id'
 *      }
 *      ...
 *    }
 *
 *    would mean that whenever we saw 'zone.attr.billing-id' while parsing
 *    through a zone XML file, we'd take its value and set that as the value
 *    for the 'billing_id' property in the VM object.
 *
 *    See also the loadValueTranslator section above which can be used to fix
 *    types when combined with zonexml.
 *
 *
 *  zonexml_depends: <string>
 *
 *    This is used for things like transition_expire which aren't real
 *    properties in the XML but *only* show up when another property is
 *    loaded. Basically these are virtual properties.
 *
 */
exports.properties = {
    add_disks: {
        payload: {
            allowed: {
                'kvm': ['update']
            },
            check_as: 'disks',
            type: 'object-array'
        }
    }, add_filesystems: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            check_as: 'filesystems',
            type: 'object-array'
        }
    }, add_nics: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            check_as: 'nics',
            type: 'object-array'
        }
    }, alias: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.alias'
    }, allowed_address: {
        ignore: true,
        zonexml: 'zone.network.allowed-address'
    }, archive_on_delete: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.archive-on-delete'
    }, autoboot: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.autoboot'
    }, billing_id: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.billing-id'
    }, boot: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.boot'
    }, boot_timestamp: {
        loadValueTranslator: 'utils.epochTimestampSecs',
        zoneinfo: 'boot_time'
    }, brand: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            required: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'string'
        },
        zonexml: 'zone.brand'
    }, cpu_cap: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.cpu-cap.privileged.deny'
    }, cpu_shares: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.cpu-shares.privileged.none'
    }, cpu_type: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.cpu-type'
    }, create_only: {
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'boolean'
        }
    }, create_timestamp: {
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'string'
        },
        zfs: {
            fields: ['creation'],
            types: ['filesystem']
        },
        zonexml: 'zone.attr.create-timestamp'
    }, customer_metadata: {
        flattenable: 'hash_key',
        json: 'customer_metadata',
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'flat-object'
        }
    }, dataset_uuid: {
        deprecated: true,
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'uuid'
        }
    }, datacenter_name: {
        sysinfo: 'Datacenter Name'
    }, datasets: {
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'list'
        },
        zfs: {
            fields: ['name'],
            types: ['filesystem']
        }
    }, debug_id: {
        ignore: true,
        zonexml: 'zone.debugid'
    }, default_gateway: {
        deprecated: true,
        zonexml: 'zone.attr.default-gateway'
    }, delegate_dataset: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'boolean'
        }
    }, disks: {
        flattenable: 'array_hash_key',
        payload: {
            allowed: {
                'kvm': ['create', 'receive']
            },
            type: 'object-array'
        },
        zfs: {
            fields: ['compression', 'name', 'refreservation', 'volblocksize',
                'volsize'],
            types: ['volume']
        },
        zonexml: 'zone.device'
    }, 'disks.*.block_size': {
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['volblocksize'],
            types: ['volume']
        }
    }, 'disks.*.boot': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.device.net-attr.boot'
    }, 'disks.*.compression': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        zfs: {
            fields: ['compression'],
            types: ['volume']
        }
    }, 'disks.*.image_name': {
        deprecated: true,
        ignore: true,
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.device.net-attr.image-name'
    }, 'disks.*.image_size': {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.device.net-attr.image-size'
    }, 'disks.*.image_uuid': {
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'uuid'
        },
        zonexml: 'zone.device.net-attr.image-uuid'
    }, 'disks.*.media': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.device.net-attr.media'
    }, 'disks.*.model': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.device.net-attr.model'
    }, 'disks.*.nocreate': {
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'boolean'
        }
    }, 'disks.*.path': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.device.match'
    }, 'disks.*.refreservation': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['refreservation'],
            types: ['volume']
        }
    }, 'disks.*.size': {
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['volsize'],
            types: ['volume']
        }
    }, 'disks.*.zfs_filesystem': {
        payload: {
            allowed: {
                'kvm': ['receive']
            },
            type: 'string'
        },
        zfs: {
            fields: ['name'],
            types: ['volume']
        }
    }, 'disks.*.zonexml_size': {
        ignore: true,
        zonexml: 'zone.device.net-attr.size'
    }, 'disks.*.zpool': {
        payload: {
            allowed: {
                'kvm': ['add']
            },
            type: 'string'
        },
        zfs: {
            fields: ['name'],
            types: ['volume']
        }
    }, disk_driver: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.disk-driver'
    }, do_not_inventory: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.do-not-inventory'
    }, docker: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'lx': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.docker'
    }, dns_domain: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.dns-domain'
    }, exit_status: {
    }, exit_timestamp: {
    }, failed: {
        zonexml: 'zone.attr.failed'
    }, 'filesystems': {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'object-array'
        },
        zonexml: 'zone.fs'
    }, 'filesystems.*.options': {
        payload: {
            allowed: {
                'joyent': ['add'],
                'joyent-minimal': ['add'],
                'lx': ['add'],
                'sngl': ['add']
            },
            type: 'list'
        }
    }, 'filesystems.*.raw': {
        payload: {
            allowed: {
                'joyent': ['add'],
                'joyent-minimal': ['add'],
                'lx': ['add'],
                'sngl': ['add']
            },
            type: 'string'
        },
        zonexml: 'zone.filesystem.raw'
    }, 'filesystems.*.source': {
        payload: {
            allowed: {
                'joyent': ['add'],
                'joyent-minimal': ['add'],
                'lx': ['add'],
                'sngl': ['add']
            },
            type: 'string'
        },
        zonexml: 'zone.filesystem.special'
    }, 'filesystems.*.target': {
        payload: {
            allowed: {
                'joyent': ['add'],
                'joyent-minimal': ['add'],
                'lx': ['add'],
                'sngl': ['add']
            },
            type: 'string'
        },
        zonexml: 'zone.filesystem.directory'
    }, 'filesystems.*.type': {
        payload: {
            allowed: {
                'joyent': ['add'],
                'joyent-minimal': ['add'],
                'lx': ['add'],
                'sngl': ['add']
            },
            type: 'string'
        },
        zonexml: 'zone.filesystem.type'
    }, firewall_enabled: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.firewall-enabled'
    }, fs_allowed: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'list'
        },
        zonexml: 'zone.fs-allowed'
    }, headnode_id: {
        sysinfo: 'Headnode ID'
    }, hostname: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.hostname'
    }, image_uuid: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            required: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'uuid'
        },
        zonexml: 'zone.attr.dataset-uuid'
    }, indestructible_delegated: {
        load_depends: ['datasets'],
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zfs: {
            fields: ['userrefs'],
            types: ['filesystem', 'snapshot']
        }
    }, indestructible_zoneroot: {
        load_depends: ['zfs_filesystem'],
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zfs: {
            fields: ['userrefs'],
            types: ['filesystem', 'snapshot']
        }
    }, init_name: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.init-name'
    }, internal_metadata: {
        flattenable: 'hash_key',
        json: 'internal_metadata',
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'flat-object'
        }
    }, internal_metadata_namespaces: {
        flattenable: 'array',
        loadValueTranslator: 'utils.separateCommas',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'list',
            valueValidator: 'utils.validAttrValue'
        },
        zonexml: 'zone.attr.internal-metadata-namespaces'
    }, ip_type: {
        ignore: true,
        zonexml: 'zone.ip-type'
    }, kernel_version: {
        payload: {
            allowed: {
                'lx': ['create', 'receive', 'update']
            },
            required: {
                'lx': ['create', 'receive']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.kernel-version'
    }, last_modified: {
    }, limit_priv: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'list'
        },
        zonexml: 'zone.limitpriv'
    }, maintain_resolvers: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.maintain-resolvers'
    }, max_locked_memory: {
        loadValueTranslator: 'utils.unmangleMem',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-locked-memory.privileged.deny'
    }, max_lwps: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-lwps.privileged.deny'
    }, max_msg_ids: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-msg-ids.privileged.deny'
    }, max_physical_memory: {
        loadValueTranslator: 'utils.unmangleMem',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-physical-memory.privileged.deny'
    }, max_sem_ids: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-sem-ids.privileged.deny'
    }, max_shm_ids: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-shm-ids.privileged.deny'
    }, max_shm_memory: {
        loadValueTranslator: 'utils.unmangleMem',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.max-shm-memory.privileged.deny'
    }, max_swap: {
        loadValueTranslator: 'utils.unmangleMem',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 256
        },
        zonexml: 'zone.rctl.zone.max-swap.privileged.deny'
    }, mdata_exec_timeout: {
        payload: {
            allowed: {
                'joyent': ['create'],
                'joyent-minimal': ['create'],
                'lx': ['create'],
                'sngl': ['create']
            },
            type: 'integer',
            min: 0
        }
    }, missing: {
        load_depends: ['state'],
        zfs: {
            fields: ['name'],
            types: ['filesystem', 'volume']
        }
    }, nic_driver: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.nic-driver'
    }, nics: {
        flattenable: 'array_hash_key',
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'object-array'
        },
        zonexml: 'zone.network'
    }, 'nics.*.allow_dhcp_spoofing': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.allow_dhcp_spoofing'
    }, 'nics.*.allow_ip_spoofing': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.allow_ip_spoofing'
    }, 'nics.*.allow_mac_spoofing': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.allow_mac_spoofing'
    }, 'nics.*.allow_restricted_traffic': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.allow_restricted_traffic'
    }, 'nics.*.allow_unfiltered_promisc': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.allow_unfiltered_promisc'
    }, 'nics.*.allowed_ips': {
        loadValueTranslator: 'utils.separateCommas',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'list'
        },
        zonexml: 'zone.network.net-attr.allowed_ips'
    }, 'nics.*.blocked_outgoing_ports': {
        loadValueTranslator: 'utils.separateCommasAndNumberify',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'list'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.blocked_outgoing_ports'
    }, 'nics.*.dhcp_server': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.dhcp_server'
    }, 'nics.*.gateway': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.gateway'
    }, 'nics.*.interface': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.network.physical'
    }, 'nics.*.ip': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.ip'
    }, 'nics.*.mac': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.mac-addr'
    }, 'nics.*.model': {
        payload: {
            allowed: {
                'kvm': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.model'
    }, 'nics.*.mtu': {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'integer',
            min: 576,
            max: 9000
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.mtu'
    }, 'nics.*.netmask': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.netmask'
    }, 'nics.*.network_uuid': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'uuid'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.network_uuid'
    }, 'nics.*.nic_tag': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.global-nic'
    }, 'nics.*.primary': {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'boolean'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.primary'
    }, 'nics.*.vlan_id': {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'integer',
            min: 0,
            max: 4095
        },
        updatable: true,
        zonexml: 'zone.network.vlan-id'
    }, 'nics.*.vrrp_vrid': {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'integer',
            min: 0,
            max: 255
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.vrrp_vrid'
    }, 'nics.*.vrrp_primary_ip': {
        payload: {
            allowed: {
                'joyent': ['add', 'update'],
                'joyent-minimal': ['add', 'update'],
                'kvm': ['add', 'update'],
                'lx': ['add', 'update'],
                'sngl': ['add', 'update']
            },
            type: 'string'
        },
        updatable: true,
        zonexml: 'zone.network.net-attr.vrrp_primary_ip'
    }, nowait: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'boolean'
        }
    }, owner_uuid: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.owner-uuid'
    }, package_name: {
        deprecated: true,
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.package-name'
    }, package_version: {
        deprecated: true,
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.package-version'
    }, pid: {
        loadValueTranslator: 'utils.numberify',
        zoneinfo: 'init_pid'
    }, platform_buildstamp: {
        sysinfo: 'Live Image'
    }, qemu_extra_opts: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.qemu-extra-opts'
    }, qemu_opts: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.qemu-opts'
    }, quota: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['quota'],
            types: ['filesystem']
        }
    }, ram: {
        load_depends: ['brand', 'max_physical_memory'],
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.attr.ram'
    }, remove_customer_metadata: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, remove_disks: {
        payload: {
            allowed: {
                'kvm': ['update']
            },
            type: 'list'
        }
    }, remove_filesystems: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, remove_internal_metadata: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, remove_nics: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, remove_routes: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, remove_tags: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'list'
        }
    }, resolvers: {
        flattenable: 'array',
        loadValueTranslator: 'utils.separateCommas',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'list',
            valueValidator: 'utils.validResolver'
        },
        zonexml: 'zone.attr.resolvers'
    }, restart_init: {
        loadValueTranslator: 'utils.fixBoolean',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'boolean'
        },
        zonexml: 'zone.attr.restart-init'
    }, routes: {
        flattenable: 'hash_key',
        json: 'routes',
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'flat-object'
        }
    }, server_uuid: {
        sysinfo: 'UUID'
    }, snapshots: {
        zfs: {
            fields: ['creation', 'name'],
            types: ['snapshot']
        }
    }, set_routes: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'flat-object'
        }
    }, set_tags: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'flat-object'
        }
    }, set_customer_metadata: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'flat-object'
        }
    }, set_internal_metadata: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            type: 'flat-object'
        }
    }, spice_opts: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.spice-opts'
    }, spice_password: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.spice-password'
    }, spice_port: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: -1
        },
        zonexml: 'zone.attr.spice-port'
    }, state: {
        load_depends: ['failed', 'transition', 'zone_state']
    }, tags: {
        flattenable: 'hash_key',
        json: 'tags',
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'flat-object'
        }
    }, transition: {
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'flat-object'
        },
        zonexml: 'zone.attr.transition'
    }, transition_expire: {
        load_depends: ['transition'],
        zonexml_depends: 'transition'
    }, transition_to: {
        load_depends: ['transition'],
        zonexml_depends: 'transition'
    }, tmpfs: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            keep_zero: true,
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.attr.tmpfs'
    }, type: {
        load_depends: ['brand']
    }, update_disks: {
        payload: {
            allowed: {
                'kvm': ['update']
            },
            check_as: 'disks',
            type: 'object-array'
        }
    }, update_filesystems: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            check_as: 'filesystems',
            type: 'object-array'
        }
    }, update_nics: {
        payload: {
            allowed: {
                'joyent': ['update'],
                'joyent-minimal': ['update'],
                'kvm': ['update'],
                'lx': ['update'],
                'sngl': ['update']
            },
            check_as: 'nics',
            type: 'object-array'
        }
    }, uuid: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'uuid'
        }
    }, v: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.attr.vm-version'
    }, vcpus: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 1
        },
        zonexml: 'zone.attr.vcpus'
    }, virtio_txburst: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.attr.virtio-txburst'
    }, virtio_txtimer: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.attr.virtio-txtimer'
    }, vga: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.vga'
    }, vm_autoboot: {
        loadValueTranslator: 'utils.fixBoolean',
        zonexml: 'zone.attr.vm-autoboot'
    }, vnc_password: {
        loadValueTranslator: 'utils.unbase64',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zonexml: 'zone.attr.vnc-password'
    }, vnc_port: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'kvm': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: -1
        },
        zonexml: 'zone.attr.vnc-port'
    }, zfs_data_compression: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zfs: {
            fields: ['compression'],
            types: ['filesystem']
        }
    }, zfs_data_recsize: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['recsize'],
            types: ['filesystem']
        }
    }, zfs_filesystem: {
        payload: {
            allowed: {
                'joyent': ['receive'],
                'joyent-minimal': ['receive'],
                'kvm': ['receive'],
                'lx': ['receive'],
                'sngl': ['receive']
            },
            type: 'string'
        },
        zfs: {
            fields: ['name'],
            types: ['filesystem']
        }
    }, zfs_filesystem_limit: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['filesystem_limit'],
            types: ['filesystem']
        }
    }, zfs_root_compression: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'string'
        },
        zfs: {
            fields: ['compression'],
            types: ['filesystem']
        }
    }, zfs_root_recsize: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['recsize'],
            types: ['filesystem']
        }
    }, zfs_io_priority: {
        loadValueTranslator: 'utils.numberify',
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zonexml: 'zone.rctl.zone.zfs-io-priority.privileged.none'
    }, zlog_mode: {
        zonexml: 'zone.attr.zlog-mode'
    }, zone_dataset_uuid: {
        payload: {
            allowed: {
                'kvm': ['create', 'receive']
            },
            type: 'uuid'
        }
    }, zonename: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'string'
        },
        zonexml: 'zone.name'
    }, zfs_snapshot_limit: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive', 'update'],
                'joyent-minimal': ['create', 'receive', 'update'],
                'kvm': ['create', 'receive', 'update'],
                'lx': ['create', 'receive', 'update'],
                'sngl': ['create', 'receive', 'update']
            },
            type: 'integer',
            min: 0
        },
        zfs: {
            fields: ['snapshot_limit'],
            types: ['filesystem']
        }
    }, zfs_storage_pool_name: {
        deprecated: true,
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'zpool'
        }
    }, zonepath: {
        ignore: true,
        zonexml: 'zone.zonepath'
    }, zpool: {
        payload: {
            allowed: {
                'joyent': ['create', 'receive'],
                'joyent-minimal': ['create', 'receive'],
                'kvm': ['create', 'receive'],
                'lx': ['create', 'receive'],
                'sngl': ['create', 'receive']
            },
            type: 'zpool'
        },
        zfs: {
            fields: ['name'],
            types: ['filesystem']
        }
    }
};

/*
 * This defines the features that a brand has for purposes of dealing with its
 * VMs. Features can include:
 *
 * 'cleanup_dataset' -- (boolean) whether to remove trash before booting
 * 'default_memory_overhead' -- (integer) memory above 'ram' that's added
 * 'interface_prefix' -- (string) vnic interfaces will be named <this>X eg. net0
 * 'limit_priv': (list) list of priviledges for this zone (if not 'default')
 * 'mdata_restart' -- (boolean) whether the brand supports restarting its
 *                    mdata:fetch service to update properties in the zone
 * 'min_memory_overhead' -- (integer) minimum delta between ram + max_physical
 * 'model_required' -- (boolean) whether a .model is required on nics and disks
 * 'runtime_info' -- (boolean) whether this zone supports the 'info' command
 * 'serial_console' -- (boolean) whether this zone uses serial console
 * 'type' -- the type of the VM (OS or KVM), all brands should include this
 * 'update_mdata_exec_timeout' (boolean) whether to update mdata:exec timeout
 * 'update_rctls' (boolean) whether we can update rctls 'live' for this zone
 * 'use_tmpfs' -- (boolean) whether this type of zone uses tmpfs
 * 'use_vm_autoboot' -- (boolean) use vm-autoboot instead of autoboot
 * 'use_vmadmd' -- (boolean) use vmadmd for some actions instead of direct
 * 'var_svc_provisioning' -- (boolean) whether brand uses /var/svc/provisioning
 * 'wait_for_hwsetup' -- (boolean) use QMP and provision_success when hwsetup
 * 'write_zone_netfiles' -- (boolean) write out files like /etc/hostname.net0
 * 'zlogin_console' -- (boolean) use zlogin -C for console (vs. serial_console)
 * 'zoneinit' -- (boolean) this brand's setup may be controlled by zoneinit
 * 'zoneroot_image_types' -- (array) list of imgadm types allowed for brand
 *
 */
exports.brand_options = {
    'joyent': {
        'features': {
            'brand_install_script': '/usr/lib/brand/joyent/jinstall',
            'cleanup_dataset': true,
            'mdata_restart': true,
            'reprovision': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'write_zone_netfiles': true,
            'zlogin_console': true,
            'zoneinit': true,
            'zoneroot_image_types': ['zone-dataset']
        }
    }, 'joyent-minimal': {
        'features': {
            'brand_install_script': '/usr/lib/brand/joyent-minimal/jinstall',
            'cleanup_dataset': true,
            'dockerinit': '/usr/vm/sbin/dockerinit',
            'mdata_restart': true,
            'reprovision': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'var_svc_provisioning': true,
            'write_zone_netfiles': true,
            'zlogin_console': true,
            'zoneroot_image_types': ['zone-dataset']
        }
    }, 'kvm': {
        'features': {
            'default_memory_overhead': KVM_MEM_OVERHEAD,
            'limit_priv': ['default', '-file_link_any', '-net_access',
                '-proc_fork', '-proc_info', '-proc_session'],
            'min_memory_overhead': KVM_MIN_MEM_OVERHEAD,
            'model_required': true,
            'runtime_info': true,
            'serial_console': true,
            'type': 'KVM',
            'use_vm_autoboot': true,
            'use_vmadmd': true,
            'var_svc_provisioning': true,
            'wait_for_hwsetup': true,
            'zoneroot_image_types': ['zone-dataset']
        }
    }, 'lx': {
        'features': {
            'dockerinit': '/native/usr/vm/sbin/dockerinit',
            'interface_prefix': 'eth',
            'reboot_cmd': '/sbin/shutdown -r now',
            'shutdown_cmd': '/sbin/shutdown -h now',
            'type': 'LX',
            'update_rctls': true,
            'use_tmpfs': true,
            'write_zone_netfiles': false,
            'zlogin_console': true,
            'zoneroot_image_types': ['docker', 'lx-dataset']
        }
    }, 'sngl': {
        'features': {
            'cleanup_dataset': true,
            'mdata_restart': true,
            'type': 'OS',
            'update_mdata_exec_timeout': true,
            'update_rctls': true,
            'use_tmpfs': true,
            'write_zone_netfiles': true,
            'zlogin_console': true,
            'zoneinit': true,
            'zoneroot_image_types': ['zone-dataset']
        }
    }
};
